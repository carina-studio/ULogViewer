<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
		xmlns:aConverters="using:Avalonia.Data.Converters"
		xmlns:as="using:CarinaStudio.AppSuite"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
		xmlns:asViewModels="using:CarinaStudio.AppSuite.ViewModels"
        xmlns:app="using:CarinaStudio.ULogViewer"
        xmlns:appControls="using:CarinaStudio.ULogViewer.Controls"
        xmlns:appConverters="using:CarinaStudio.ULogViewer.Converters"
        xmlns:appViewModels="using:CarinaStudio.ULogViewer.ViewModels"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.ULogViewer.Controls.AppOptionsDialog"
        x:CompileBindings="True"
        x:DataType="appViewModels:AppOptions"
		Name="window">

	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" DockPanel.Dock="Bottom">
			<Panel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{ReflectionBinding #window.GenerateResultCommand}" Content="{Binding #window.OKButtonText}"/>
			</Panel>
		</Border>
		
		<!-- Navigation bar -->
		<Border Classes="ToolBar" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,1,0" DockPanel.Dock="Left">
			<asControls:ToolBarScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
				<StackPanel>
					
					<!-- User interface -->
					<ToggleButton Name="userInterfacePanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptions.UserInterface}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.UserInterface.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.UserInterface.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Log operations -->
					<ToggleButton Name="logOperationsPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/AppOptionsDialog.LogOperations}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/LogProfile.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/LogProfile.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Log filtering -->
					<ToggleButton Name="logFilteringPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/AppOptionsDialog.LogFiltering}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Others -->
					<ToggleButton Name="othersPanelButton" Classes="ToolBar_ToggleButton" ToolTip.Tip="{DynamicResource String/ApplicationOptions.Others}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Tool.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{DynamicResource Image/Icon.Tool.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
				</StackPanel>
			</asControls:ToolBarScrollViewer>
		</Border>

		<!-- Content -->
		<Panel>
			<ScrollViewer Name="rootScrollViewer" MaxHeight="{DynamicResource Double/ApplicationOptionsDialog.Content.MaxHeight}">
				<StackPanel Classes="Dialog_ContentPanel_WithItemsGroups">

					<!-- User interface -->
					<StackPanel Name="userInterfacePanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptions.UserInterface}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>
						
								<!-- Theme mode -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.ThemeMode}"/>
										<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*">
											<Grid.IsVisible>
												<MultiBinding Converter="{x:Static aConverters:BoolConverters.And}">
													<Binding Path="IsRestartingRootWindowsNeeded"/>
													<Binding Path="IsThemeModeChanged"/>
												</MultiBinding>
											</Grid.IsVisible>
											<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding !HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillCloseAllWindowsToTakeEffect}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillRestartMainWindowsToTakeEffect}"/>
										</Grid>
									</StackPanel>
									<ComboBox Classes="Dialog_Item_ComboBox" ItemsSource="{Binding ThemeModes, Mode=OneTime}" SelectedItem="{Binding ThemeMode, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Converter={x:Static asViewModels:ApplicationOptions.ThemeModeConverter}}"/>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Compact UI -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.UseCompactUserInterface}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding !#compactUIWarningDescriptionGrid.IsVisible}" Text="{DynamicResource String/ApplicationOptions.UseCompactUserInterface.Description}"/>
										<Grid Name="compactUIWarningDescriptionGrid" Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*">
											<Grid.IsVisible>
												<MultiBinding Converter="{x:Static aConverters:BoolConverters.And}">
													<Binding Path="IsRestartingRootWindowsNeeded"/>
													<Binding Path="IsUseCompactUserInterfaceChanged"/>
												</MultiBinding>
											</Grid.IsVisible>
											<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding !HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillCloseAllWindowsToTakeEffect}"/>
											<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" IsVisible="{Binding HasMainWindows}" Text="{DynamicResource String/ApplicationOptions.WillRestartMainWindowsToTakeEffect}"/>
										</Grid>
									</StackPanel>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseCompactUserInterface, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Culture -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.Culture}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type as:ApplicationCulture}" SelectedItem="{Binding Culture, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Use embedded fonts for Chinese -->
								<StackPanel IsVisible="{Binding IsUseEmbeddedFontsForChineseSupported}">
									<asControls:DialogItem>
										<StackPanel Classes="Dialog_Item_Text_Container">
											<WrapPanel>
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.UseEmbeddedFontsForChinese}"/>
												<Button Classes="Dialog_Info_Button" Command="{Binding #window.OpenNotoSansDocument}" ToolTip.Tip="{DynamicResource String/Common.Help}">
													<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
												</Button>
											</WrapPanel>
											<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding IsUseEmbeddedFontsForChineseChanged}">
												<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
												<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Grid.Column="1" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
											</Grid>
										</StackPanel>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding UseEmbeddedFontsForChinese, Mode=TwoWay}"/>
									</asControls:DialogItem>
									<Separator Classes="Dialog_Item_Separator"/>
								</StackPanel>

								<!-- Custom screen scale factor -->
								<StackPanel IsVisible="{Binding IsCustomScreenScaleFactorSupported}">
									<asControls:DialogItem>
										<StackPanel Classes="Dialog_Item_Text_Container">
											<StackPanel Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.CustomScreenScaleFactor}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{Binding CustomScreenScaleFactor, Converter={x:Static asConverters:RatioToPercentageConverter.Default}, StringFormat={}({0})}" VerticalAlignment="Center"/>
											</StackPanel>
											<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding IsCustomScreenScaleFactorAdjusted}" Margin="{StaticResource Thickness/Dialog.TextBlock.Margin.Description}">
												<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
												<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Foreground="{DynamicResource Brush/Dialog.TextBlock.Foreground.Warning}" Grid.Column="1" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
											</Grid>
										</StackPanel>
										<Slider Classes="Dialog_Item_Slider" HorizontalAlignment="Stretch" Maximum="{Binding MaxCustomScreenScaleFactor, Mode=OneTime}" Minimum="1" TickPlacement="None" TickFrequency="{Binding CustomScreenScaleFactorGranularity, Mode=OneTime}" Value="{Binding CustomScreenScaleFactor, Mode=TwoWay}">
											<Slider.IsEnabled>
												<MultiBinding Converter="{x:Static BoolConverters.And}">
													<Binding Path="!IsCheckingXRandR"/>
													<Binding Path="IsXRandRInstalled"/>
												</MultiBinding>
											</Slider.IsEnabled>
										</Slider>
									</asControls:DialogItem>
									<Separator Classes="Dialog_Item_Separator"/>
								</StackPanel>

								<!-- Log font -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.LogFont}"/>
								</asControls:DialogItem>
								<Line Classes="Dialog_Item_Separator_Inner"/>
								<Grid ColumnDefinitions="*,Auto,*">
									<ComboBox Classes="Dialog_ComboBox" ItemsSource="{Binding InstalledFontFamilies}" SelectedItem="{Binding LogFontFamily, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate>
												<Grid ColumnDefinitions="*,Auto">
													<TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
													<abControls:FormattedTextBlock Arg1="{DynamicResource String/Common.BuiltIn}" Format="({0})" Grid.Column="1" IsVisible="{Binding IsBuiltIn}" Margin="{StaticResource Thickness/AppOptionsDialog.FontFamily.ExtraInfo.Margin}" Opacity="{StaticResource Double/AppOptionsDialog.FontFamily.ExtraInfo.Opacity}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
												</Grid>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
									<Separator Classes="Dialog_Separator_Small" Grid.Column="1"/>
									<NumericUpDown Classes="Dialog_NumericUpDown" FormatString="{}{0:F0}" Grid.Column="2" Maximum="30" Minimum="10" Value="{Binding LogFontSize, Mode=TwoWay}"/>
								</Grid>
								<Line Classes="Dialog_Item_Separator_Inner"/>
								<Border HorizontalAlignment="Stretch" Padding="{StaticResource TextControlThemePadding}">
									<Grid>
										<TextBlock FontSize="20" HorizontalAlignment="Center" Opacity="0" Text="{DynamicResource String/AppOptionsDialog.LogFont.Sample}" VerticalAlignment="Center"/>
										<TextBlock FontFamily="{Binding SampleLogFontFamily}" FontSize="{Binding LogFontSize}" HorizontalAlignment="Center" Text="{DynamicResource String/AppOptionsDialog.LogFont.Sample}" VerticalAlignment="Center"/>
									</Grid>
								</Border>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Pattern font -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.PatternFont}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/AppOptionsDialog.PatternFont.Description}"/>
									</StackPanel>
								</asControls:DialogItem>
								<Line Classes="Dialog_Item_Separator_Inner"/>
								<ComboBox Classes="Dialog_ComboBox" ItemsSource="{Binding InstalledFontFamilies}" SelectedItem="{Binding PatternFontFamily, Mode=TwoWay}">
									<ComboBox.ItemTemplate>
										<DataTemplate>
											<Grid ColumnDefinitions="*,Auto">
												<TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
												<abControls:FormattedTextBlock Arg1="{DynamicResource String/Common.BuiltIn}" Format="({0})" Grid.Column="1" IsVisible="{Binding IsBuiltIn}" Margin="{StaticResource Thickness/AppOptionsDialog.FontFamily.ExtraInfo.Margin}" Opacity="{StaticResource Double/AppOptionsDialog.FontFamily.ExtraInfo.Opacity}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
											</Grid>
										</DataTemplate>
									</ComboBox.ItemTemplate>
								</ComboBox>
								<Line Classes="Dialog_Item_Separator_Inner"/>
								<Border HorizontalAlignment="Stretch" Padding="{StaticResource TextControlThemePadding}">
									<Grid>
										<TextBlock FontSize="16" HorizontalAlignment="Center" Opacity="0" Text="{DynamicResource String/AppOptionsDialog.PatternFont.Sample}" VerticalAlignment="Center"/>
										<TextBlock FontFamily="{Binding SamplePatternFontFamily}" HorizontalAlignment="Center" Text="{DynamicResource String/AppOptionsDialog.PatternFont.Sample}" VerticalAlignment="Center"/>
									</Grid>
								</Border>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Log separators -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.LogSeparators}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type appControls:LogSeparatorType}" SelectedItem="{Binding LogSeparators, Mode=TwoWay}"/>
								</asControls:DialogItem>
								
								<!-- Disable ANGLE -->
								<StackPanel IsVisible="{Binding IsDisableAngleSupported}">
									<Separator Classes="Dialog_Item_Separator"/>
									<asControls:DialogItem>
										<StackPanel Classes="DIalog_Item_Text_Container">
											<WrapPanel>
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.DisableAngle}"/>
												<Button Classes="Dialog_Info_Button" Command="{x:Static app:Utility.OpenLinkCommand}" CommandParameter="{x:Static app:Uris.Angle}" ToolTip.Tip="{DynamicResource String/Common.Help}">
													<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
												</Button>
											</WrapPanel>
											<TextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding !#restartNeededByDisablingAngle.IsVisible}" Text="{DynamicResource String/ApplicationOptions.DisableAngle.Description}"/>
											<Grid Name="restartNeededByDisablingAngle" Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding IsDisableAngleChanged}">
												<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
												<TextBlock Classes="Dialog_Icon_TextBlock_Description_Warning" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
											</Grid>
										</StackPanel>
										<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding DisableAngle, Mode=TwoWay}"/>
									</asControls:DialogItem>
								</StackPanel>

							</StackPanel>
						</Border>
						<Separator Classes="Dialog_Separator_Large"/>
					</StackPanel>

					<!-- Log operations -->
					<StackPanel Name="logOperationsPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/AppOptionsDialog.LogOperations}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Initial log profile -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.InitialLogProfile}"/>
									<ToggleButton Name="initLogProfileButton" Classes="Dialog_Item_ToggleButton" HorizontalContentAlignment="Stretch" MinWidth="{StaticResource Double/Dialog.Control.MinWidth}">
										<Grid ColumnDefinitions="Auto,*,Auto" DataContext="{Binding InitialLogProfile}">
											<Panel Classes="Button_Icon">
												<Image Classes="Icon">
													<Image.Source>
														<MultiBinding Converter="{x:Static appConverters:LogProfileIconConverter.Default}">
															<Binding Path="Icon"/>
															<Binding Path="IconColor"/>
														</MultiBinding>
													</Image.Source>
												</Image>
											</Panel>
											<TextBlock Classes="Button_TextBlock" Grid.Column="1" Text="{Binding Name}"/>
											<Panel Grid.Column="2">
												<Image Classes="Button_DropDownIcon" IsVisible="{Binding !#initLogProfileButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down}"/>
												<Image Classes="Button_DropDownIcon" IsVisible="{Binding #initLogProfileButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down.Light}"/>
											</Panel>
										</Grid>
									</ToggleButton>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Select log profile for new session -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectLogProfileForNewSession}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectLogProfileForNewSession, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Select files when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectLogFilesWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectLogFilesWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Select command when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectCommandWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectCommandWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Select IP endpoint when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectIPEndPointWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectIPEndPointWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Set URI when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectUriWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectUriWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Select working directory when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectWorkingDirectoryWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectWorkingDirectoryWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Select PID when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectProcessIdWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectProcessIdWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Select process name when needed -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectProcessNameWhenNeeded}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectProcessNameWhenNeeded, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

						<!-- Select reading precondition for files -->
						<asControls:DialogItem>
							<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SelectLogReadingPreconditionForFiles}"/>
							<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SelectLogReadingPreconditionForFiles, Mode=TwoWay}"/>
						</asControls:DialogItem>
						<Separator Classes="Dialog_Item_Separator"/>
						
						<!-- Switch to marked logs panel -->
						<asControls:DialogItem>
							<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.SwitchToMarkedLogsPanelAfterMarkingLogs}"/>
							<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding SwitchToMarkedLogsPanelAfterMarkingLogs, Mode=TwoWay}"/>
						</asControls:DialogItem>
						<Separator Classes="Dialog_Item_Separator"/>

								<!-- Enable scrolling to latest logs automatically -->
								<asControls:DialogItem>
									<StackPanel Classes="Dialog_Item_Text_Container">
										<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.EnableScrollingToLatestLogAfterReloadingLogs}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/AppOptionsDialog.EnableScrollingToLatestLogAfterReloadingLogs.Description}"/>
									</StackPanel>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding EnableScrollingToLatestLogAfterReloadingLogs, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Max log count -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.MaxContinuousLogCount}"/>
									<abControls:IntegerTextBox Name="maxContinuousLogCountTextBox" Classes="Dialog_Item_TextBox" IsNullValueAllowed="False" Maximum="10000000" Minimum="10000" Value="{Binding MaxContinuousLogCount, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Update interval -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.ContinuousLogReadingUpdateInterval}"/>
									<abControls:IntegerTextBox Name="continuousReadingUpdateIntervalTextBox" Classes="Dialog_Item_TextBox" IsNullValueAllowed="False" Maximum="1000" Minimum="50" Value="{Binding ContinuousLogReadingUpdateInterval, Mode=TwoWay}"/>
								</asControls:DialogItem>

							</StackPanel>
						</Border>
						<Separator Classes="Dialog_Separator_Large"/>
					</StackPanel>

					<!-- Log filtering -->
					<StackPanel Name="logFilteringPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/AppOptionsDialog.LogFiltering}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Ignore case -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.IgnoreCaseOfLogTextFilter}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding IgnoreCaseOfLogTextFilter, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Show help button -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.ShowHelpButtonOnLogTextFilter}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowHelpButtonOnLogTextFilter, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Log filter update delay -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.UpdateLogFilterDelay}"/>
									<abControls:IntegerTextBox Name="updateLogFilterDelayTextBox" Classes="Dialog_Item_TextBox" IsNullValueAllowed="False" Maximum="1500" Minimum="300" Value="{Binding UpdateLogFilterDelay, Mode=TwoWay}"/>
								</asControls:DialogItem>

							</StackPanel>
						</Border>
						<Separator Classes="Dialog_Separator_Large"/>
					</StackPanel>

					<!-- Others -->
					<StackPanel Name="othersPanel">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/ApplicationOptions.Others}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>

								<!-- Default text shell -->
								<asControls:DialogItem Name="defaultTextShellItem">
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.DefaultTextShell}"/>
									<ComboBox Classes="Dialog_Item_ComboBox" ItemsSource="{ReflectionBinding InstalledTextShells, Source={x:Static app:TextShellManager.Default}}" SelectedItem="{Binding DefaultTextShell, Mode=TwoWay}">
										<ComboBox.ItemTemplate>
											<DataTemplate x:CompileBindings="True" x:DataType="app:TextShell" DataType="{x:Type app:TextShell}">
												<TextBlock Text="{ReflectionBinding Converter={x:Static appControls:AppOptionsDialog.TextShellConverter}}"/>
											</DataTemplate>
										</ComboBox.ItemTemplate>
									</ComboBox>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Show process info -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.ShowProcessInfo}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding ShowProcessInfo, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Memory usage policy -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/AppOptionsDialog.MemoryUsagePolicy}"/>
									<asControls:EnumComboBox Classes="Dialog_Item_ComboBox" EnumType="{x:Type app:MemoryUsagePolicy}" SelectedItem="{Binding MemoryUsagePolicy, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>
								
								<!-- Physical memory usage percentage to stop reading logs -->
								<asControls:DialogItem IsVisible="{Binding PrivateMemoryUsageToStopReadingLogs}">
									<StackPanel Classes="Dialog_Item_Text_Container">
										<abControls:FormattedTextBlock Classes="Dialog_TextBlock_Label" Arg1="{Binding PrivateMemoryUsageToStopReadingLogs, Converter={x:Static asConverters:FileSizeConverter.Default}}" Arg2="{Binding PhysicalMemoryUsagePercentageToStopReadingLogs}" Format="{DynamicResource String/AppOptionsDialog.PhysicalMemoryUsagePercentageToStopReadingLogs}"/>
										<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/AppOptionsDialog.PhysicalMemoryUsagePercentageToStopReadingLogs.Description}"/>
									</StackPanel>
									<Slider Classes="Dialog_Item_Slider" IsSnapToTickEnabled="True" Maximum="{Binding MaxPhysicalMemoryUsagePercentageToStopReadingLogs, Mode=OneTime}" Minimum="{Binding MinPhysicalMemoryUsagePercentageToStopReadingLogs, Mode=OneTime}" TickFrequency="5" Value="{Binding PhysicalMemoryUsagePercentageToStopReadingLogs, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator" IsVisible="{Binding PrivateMemoryUsageToStopReadingLogs}"/>

								<!-- Notify application update -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.NotifyApplicationUpdate}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding NotifyApplicationUpdate, Mode=TwoWay}"/>
								</asControls:DialogItem>
								<Separator Classes="Dialog_Item_Separator"/>

								<!-- Accept non-stable update -->
								<asControls:DialogItem>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/ApplicationOptions.AcceptNonStableApplicationUpdate}"/>
									<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding AcceptNonStableApplicationUpdate, Mode=TwoWay}"/>
								</asControls:DialogItem>

							</StackPanel>
						</Border>
					</StackPanel>
					
				</StackPanel>
			</ScrollViewer>
		</Panel>

	</DockPanel>
	
</Window>
