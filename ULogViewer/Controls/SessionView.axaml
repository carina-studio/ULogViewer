<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:sys="using:System"
             xmlns:ia="using:Avalonia.Xaml.Interactivity"
             xmlns:iaCore="using:Avalonia.Xaml.Interactions.Core"
			 xmlns:abControls="using:CarinaStudio.Controls"
			 xmlns:abConverters="using:CarinaStudio.Data.Converters"
			 xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
			 xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
			 xmlns:asInput="using:CarinaStudio.AppSuite.Input"
			 xmlns:asXaml="using:CarinaStudio.AppSuite.Xaml"
			 xmlns:app="using:CarinaStudio.ULogViewer"
			 xmlns:appAnalysis="using:CarinaStudio.ULogViewer.ViewModels.Analysis"
			 xmlns:appAnalysisScripting="using:CarinaStudio.ULogViewer.ViewModels.Analysis.Scripting"
             xmlns:appCategorizing="using:CarinaStudio.ULogViewer.ViewModels.Categorizing"
             xmlns:appControls="using:CarinaStudio.ULogViewer.Controls"
             xmlns:appConverters="using:CarinaStudio.ULogViewer.Converters"
			 xmlns:appCtxlBased="using:CarinaStudio.ULogViewer.ViewModels.Analysis.ContextualBased"
			 xmlns:appInput="using:CarinaStudio.ULogViewer.Input"
             xmlns:appLogs="using:CarinaStudio.ULogViewer.Logs"
             xmlns:appViewModels="using:CarinaStudio.ULogViewer.ViewModels"
			 xmlns:cs="using:CarinaStudio"
             xmlns:lvc="using:LiveChartsCore.SkiaSharpView.Avalonia"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="CarinaStudio.ULogViewer.Controls.SessionView"
             x:CompileBindings="False"
             x:DataType="appViewModels:Session"
			 Name="root">

	<!-- Resources -->
	<UserControl.Resources>

		<!-- Create log analysis rule set menu -->
		<ContextMenu x:Key="createLogAnalysisRuleSetMenu" Placement="Bottom">
			<MenuItem Command="{Binding #root.CreateKeyLogAnalysisRuleSet}" Header="{asXaml:StringResource SessionView.LogAnalysisRuleSets.KeyLogAnalysisRuleSet}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{DynamicResource Image/Icon.Flag.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.CreateOperationDurationAnalysisRuleSet}" Header="{asXaml:StringResource SessionView.LogAnalysisRuleSets.OperationDurationAnalysisRuleSet}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Timer.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.CreateOperationCountingAnalysisRuleSet}" Header="{asXaml:StringResource SessionView.LogAnalysisRuleSets.OperationCountingAnalysisRuleSet}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Layers.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.CreateLogAnalysisScriptSet}" Header="{asXaml:StringResource SessionView.LogAnalysisRuleSets.LogAnalysisScriptSet}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Code}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Log actions menu -->
		<ContextMenu x:Key="logActionMenu">
			<MenuItem Name="showLogPropertyMenuItem" Command="{Binding #root.ShowLogStringPropertyCommand}" Header="{asXaml:StringResource SessionView.ShowLogProperty.Disabled}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Details.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Header="{asXaml:StringResource SessionView.MarkLogs}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Mark.Outline}"/>
				</MenuItem.Icon>
				<MenuItem.Styles>
					<Style Selector="Border.MarkIcon">
						<Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemForeground}"/>
						<Setter Property="BorderThickness" Value="{StaticResource Thickness/SessionView.Menu.MarkColorIcon.Border}"/>
						<Setter Property="CornerRadius" Value="{StaticResource CornerRadius/SessionView.Menu.MarkColorIcon}"/>
						<Setter Property="Height" Value="{StaticResource Double/MenuItem.Icon.Size}"/>
						<Setter Property="Width" Value="{StaticResource Double/MenuItem.Icon.Size}"/>
					</Style>
				</MenuItem.Styles>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Default}" Header="{asXaml:StringResource MarkColor.Default}" InputGesture="{x:Static appInput:KeyGestures.MarkLogs}"/>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Red}" Header="{asXaml:StringResource MarkColor.Red}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithRed}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Red}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Orange}" Header="{asXaml:StringResource MarkColor.Orange}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithOrange}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Orange}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Yellow}" Header="{asXaml:StringResource MarkColor.Yellow}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithYellow}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Yellow}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Green}" Header="{asXaml:StringResource MarkColor.Green}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithGreen}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Green}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Blue}" Header="{asXaml:StringResource MarkColor.Blue}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithBlue}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Blue}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Indigo}" Header="{asXaml:StringResource MarkColor.Indigo}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithIndigo}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Indigo}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Purple}" Header="{asXaml:StringResource MarkColor.Purple}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithPurple}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Purple}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Magenta}" Header="{asXaml:StringResource MarkColor.Magenta}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithMagenta}">
					<MenuItem.Icon>
						<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Magenta}"/>
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
			<MenuItem Command="{Binding #root.UnmarkSelectedLogsCommand}" Header="{asXaml:StringResource SessionView.UnmarkLogs}" InputGesture="{x:Static appInput:KeyGestures.UnmarkLogs}">
				<MenuItem.Icon>
					<Image Classes="Icon" Source="{StaticResource Image/Unmark.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogSelection.SelectMarkedLogsCommand}" Header="{asXaml:StringResource SessionView.SelectMarkedLogs}" InputGesture="{x:Static appInput:KeyGestures.SelectMarkLogs}"/>
			<Separator/>
			<MenuItem Name="copyLogPropertyMenuItem" Command="{Binding #root.CopyLogPropertyCommand}" Header="{asXaml:StringResource SessionView.CopyLogProperty.Disabled}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogSelection.CopySelectedLogsCommand}" Header="{asXaml:StringResource SessionView.CopyLogs}" InputGesture="{x:Static asInput:KeyGestures.Copy}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogSelection.CopySelectedLogsWithFileNamesCommand}" Header="{asXaml:StringResource SessionView.CopyLogsWithFileNames}" InputGesture="{x:Static appInput:KeyGestures.CopyLogsWithFileNames}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.CopyLogTextCommand}" Header="{asXaml:StringResource SessionView.CopyLogText}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Debug.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Name="filterByLogPropertyMenuItem" Header="{asXaml:StringResource SessionView.FilterByLogProperty.Disabled}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Filter.Outline}"/>
				</MenuItem.Icon>
				<MenuItem Command="{Binding LogFiltering.FilterBySelectedPropertyCommand}" CommandParameter="{x:Static app:Accuracy.Normal}" Header="{asXaml:StringResource SessionView.FilterByLogProperty.NormalAccuracy}"/>
				<Separator/>
				<MenuItem Command="{Binding LogFiltering.FilterBySelectedPropertyCommand}" CommandParameter="{x:Static app:Accuracy.High}" Header="{asXaml:StringResource SessionView.FilterByLogProperty.HighAccuracy}"/>
				<MenuItem Command="{Binding LogFiltering.FilterBySelectedPropertyCommand}" CommandParameter="{x:Static app:Accuracy.Low}" Header="{asXaml:StringResource SessionView.FilterByLogProperty.LowAccuracy}"/>
			</MenuItem>
			<MenuItem Command="{Binding LogFiltering.FilterBySelectedProcessIdCommand}" Header="{asXaml:StringResource SessionView.FilterLogsBySelectedProcessId}">
				<MenuItem.CommandParameter>
					<sys:Boolean>False</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Filter.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogFiltering.FilterBySelectedProcessIdCommand}" Header="{asXaml:StringResource SessionView.FilterLogsBySelectedProcessIdOnly}">
				<MenuItem.CommandParameter>
					<sys:Boolean>True</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Filter.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogFiltering.FilterBySelectedThreadIdCommand}" Header="{asXaml:StringResource SessionView.FilterLogsBySelectedThreadId}">
				<MenuItem.CommandParameter>
					<sys:Boolean>False</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Filter.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogFiltering.FilterBySelectedThreadIdCommand}" Header="{asXaml:StringResource SessionView.FilterLogsBySelectedThreadIdOnly}">
				<MenuItem.CommandParameter>
					<sys:Boolean>True</sys:Boolean>
				</MenuItem.CommandParameter>
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Filter.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Name="searchLogPropertyOnInternetMenuItem">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Search}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.ShowFileInExplorerCommand}" Header="{asXaml:StringResource SessionView.ShowFileInExplorer}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.FileManager.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>
		
		<!-- Log chart type menu -->
		<ContextMenu x:Key="logChartTypeMenu" Placement="Top"/>

		<!-- Log file action menu -->
		<ContextMenu x:Key="logFileActionMenu" IsEnabled="{Binding $self.DataContext, Converter={x:Static ObjectConverters.IsNotNull}}">
			<MenuItem Command="{Binding #root.CopyLogFileNameCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.CopyLogFileName}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.CopyLogFilePathCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.CopyLogFilePath}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding #root.ReloadLogFileWithNewPreconditionCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.ReloadLogFile.WithNewLogReadingPrecondition}"
			          IsEnabled="{asXaml:AndBindings
			              {Binding !IsPredefined, FallbackValue=False},
			              {Binding #root.DataContext.HasTimestampDisplayableLogProperty, FallbackValue=False}
			          }">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/CheckFilter.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.ReloadLogFileWithoutLogReadingPreconditionCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.ReloadLogFile.WithoutLogReadingPrecondition}"
			          IsEnabled="{asXaml:AndBindings
			              {Binding !IsPredefined, FallbackValue=False},
			              {Binding !LogReadingPrecondition.IsEmpty, FallbackValue=False}
			          }">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/ClearFilters.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.ReloadLogFileWithNewMaxLogReadingCountCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.ReloadLogFile.WithNewMaxLogReadingCount}" 
			          IsEnabled="{Binding !IsPredefined, FallbackValue=False}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Layers.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding #root.DataContext.RemoveLogFileCommand, FallbackValue={x:Null}}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.RemoveLogFile}" 
			          IsEnabled="{Binding !IsPredefined, FallbackValue=False}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Delete.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding #root.ShowLogFileInExplorerCommand}" 
			          CommandParameter="{Binding FileName}" 
			          Header="{asXaml:StringResource SessionView.ShowFileInExplorer}"
			          IsEnabled="{x:Static cs:Platform.IsOpeningFileManagerSupported}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.FileManager.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Log filter combination mode menu -->
		<ContextMenu x:Key="logFilterCombinationModeMenu" Placement="Bottom">
			<MenuItem Command="{Binding LogFiltering.SetFilterCombinationModeCommand}" 
			          CommandParameter="{x:Static appViewModels:FilterCombinationMode.Auto}" 
			          Header="{asXaml:StringResource FilterCombinationMode.Auto}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/FilterCombinationMode.Auto}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding LogFiltering.SetFilterCombinationModeCommand}" 
			          CommandParameter="{x:Static appViewModels:FilterCombinationMode.Intersection}" 
			          Header="{asXaml:StringResource FilterCombinationMode.Intersection}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Intersection}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding LogFiltering.SetFilterCombinationModeCommand}" 
			          CommandParameter="{x:Static appViewModels:FilterCombinationMode.Union}" 
			          Header="{asXaml:StringResource FilterCombinationMode.Union}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Union}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Log header template-->
		<DataTemplate x:Key="logHeaderTemplate" x:CompileBindings="True" x:DataType="appViewModels:DisplayableLogProperty">
			<Border Name="border" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Stretch" Margin="{StaticResource Thickness/SessionView.LogHeader.Margin}" Padding="{StaticResource Thickness/SessionView.LogHeader.Padding}">
				<ToolTip.Tip>
					<StackPanel>
						<TextBlock IsVisible="{ReflectionBinding #textBlock.IsTextTrimmed}" TextTrimming="CharacterEllipsis">
							<TextBlock.Inlines>
								<Run Text="{Binding DisplayName}"/>
								<Run Text="{Binding SecondaryDisplayName, Converter={x:Static appControls:SessionView.LogSecondaryDisplayNameConverter}}"/>
								<Run Foreground="{DynamicResource Brush/SessionView.LogHeader.Quantifier.Foreground}" Text="{Binding Quantifier, Converter={x:Static appControls:SessionView.LogQuantifierConverter}}"/>
							</TextBlock.Inlines>
						</TextBlock>
						<abControls:FormattedTextBlock Arg1="{Binding NameForLogProperty}" Format="{asXaml:StringResource SessionView.LogPropertyName}" TextTrimming="CharacterEllipsis"/>
					</StackPanel>
				</ToolTip.Tip>
				<abControls:TextBlock Name="textBlock" ShowToolTipWhenTextTrimmed="False" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" VerticalAlignment="Center">
					<abControls:TextBlock.Inlines>
						<Run Text="{Binding DisplayName}"/>
						<Run Text="{Binding SecondaryDisplayName, Converter={x:Static appControls:SessionView.LogSecondaryDisplayNameConverter}}"/>
						<Run Foreground="{DynamicResource Brush/SessionView.LogHeader.Quantifier.Foreground}" Text="{Binding Quantifier, Converter={x:Static appControls:SessionView.LogQuantifierConverter}}"/>
					</abControls:TextBlock.Inlines>
				</abControls:TextBlock>
			</Border>
		</DataTemplate>

		<!-- Log marking menu -->
		<ContextMenu x:Key="logMarkingMenu">
			<ContextMenu.Styles>
				<Style Selector="Border.MarkIcon">
					<Setter Property="BorderBrush" Value="{DynamicResource MenuFlyoutItemForeground}"/>
					<Setter Property="BorderThickness" Value="{StaticResource Thickness/SessionView.Menu.MarkColorIcon.Border}"/>
					<Setter Property="CornerRadius" Value="{StaticResource CornerRadius/SessionView.Menu.MarkColorIcon}"/>
					<Setter Property="Height" Value="{StaticResource Double/MenuItem.Icon.Size}"/>
					<Setter Property="Width" Value="{StaticResource Double/MenuItem.Icon.Size}"/>
				</Style>
			</ContextMenu.Styles>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Default}" Header="{asXaml:StringResource MarkColor.Default}" InputGesture="{x:Static appInput:KeyGestures.MarkLogs}"/>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Red}" Header="{asXaml:StringResource MarkColor.Red}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithRed}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Red}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Orange}" Header="{asXaml:StringResource MarkColor.Orange}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithOrange}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Orange}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Yellow}" Header="{asXaml:StringResource MarkColor.Yellow}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithYellow}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Yellow}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Green}" Header="{asXaml:StringResource MarkColor.Green}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithGreen}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Green}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Blue}" Header="{asXaml:StringResource MarkColor.Blue}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithBlue}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Blue}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Indigo}" Header="{asXaml:StringResource MarkColor.Indigo}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithIndigo}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Indigo}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Purple}" Header="{asXaml:StringResource MarkColor.Purple}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithPurple}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Purple}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.MarkSelectedLogsCommand}" CommandParameter="{x:Static appViewModels:MarkColor.Magenta}" Header="{asXaml:StringResource MarkColor.Magenta}" InputGesture="{x:Static appInput:KeyGestures.MarkLogsWithMagenta}">
				<MenuItem.Icon>
					<Border Classes="MarkIcon" Background="{DynamicResource Brush/SessionView.LogListBox.MarkIndicator.Magenta}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding #root.UnmarkSelectedLogsCommand}" Header="{asXaml:StringResource SessionView.UnmarkLogs}" InputGesture="{x:Static appInput:KeyGestures.UnmarkLogs}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Unmark.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Log profile selection menu -->
		<appControls:LogProfileSelectionContextMenu x:Key="logProfileSelectionMenu" Placement="Bottom"/>

		<!-- Log property tool tip template -->
		<DataTemplate x:Key="logPropertyToolTipTemplate">
			<TextBlock FontFamily="{Binding LogFontFamily, Source={x:Static appControls:ControlFonts.Default}}" MaxLines="8" Text="{Binding}" TextTrimming="CharacterEllipsis" TextWrapping="Wrap"/>
		</DataTemplate>

		<!-- Logs saving menu -->
		<ContextMenu x:Key="logsSavingMenu" Placement="Bottom">
			<MenuItem Command="{Binding #root.SaveLogsCommand}" Header="{asXaml:StringResource SessionView.SaveLogs}" InputGesture="{x:Static appInput:KeyGestures.SaveLogs}"/>
			<MenuItem Command="{Binding #root.SaveAllLogsCommand}" Header="{asXaml:StringResource SessionView.SaveAllLogs}" InputGesture="{x:Static appInput:KeyGestures.SaveAllLogs}"/>
		</ContextMenu>

		<!-- Other actions menu -->
		<ContextMenu x:Key="otherActionsMenu" Placement="Bottom">
			<MenuItem Command="{Binding #root.Application.ShowApplicationOptionsDialog}" 
			          Header="{asXaml:StringResource SessionView.AppOptions}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Settings.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.Application.CheckForApplicationUpdate}" 
			          Header="{asXaml:StringResource SessionView.CheckForAppUpdate}">
				<MenuItem.Icon>
					<Panel>
						<Image Classes="MenuItem_Icon" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static ObjectConverters.IsNull}}" Source="{StaticResource Image/Icon.Update.Outline}"/>
						<Image Classes="MenuItem_Icon" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static ObjectConverters.IsNotNull}}" Source="{StaticResource Image/Icon.Update.Colored}"/>
					</Panel>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.RestartAsAdministratorCommand}" 
			          Header="{asXaml:StringResource SessionView.RestartAsAdministrator}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Administrator}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[Window].CreateMainWindow}" 
			          Header="{asXaml:StringResource Common.CreateWindow}" InputGesture="{x:Static appInput:KeyGestures.NewWindow}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.AddWindow}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" 
			          CommandParameter="{x:Static asControls:MultiWindowLayout.Horizontal}" 
			          Header="{asXaml:StringResource MainWindow.LayoutMainWindows.Horizontal}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Horizontal}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" 
			          CommandParameter="{x:Static asControls:MultiWindowLayout.Vertical}" 
			          Header="{asXaml:StringResource MainWindow.LayoutMainWindows.Vertical}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Vertical}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[Window].LayoutMainWindowsCommand}" 
			          CommandParameter="{x:Static asControls:MultiWindowLayout.Tile}" 
			          Header="{asXaml:StringResource MainWindow.LayoutMainWindows.Tile}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Layout.Tile}"/>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Name="toolsMenuItem" 
			          Header="{asXaml:StringResource SessionView.Tools}" 
			          IsVisible="{Binding #root.IsToolsMenuItemVisible}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Tool.Outline}"/>
				</MenuItem.Icon>
				<MenuItem Command="{Binding #root.EditPathEnvVar}" 
				          Header="{asXaml:StringResource SessionView.EditPathEnvVar}" 
				          IsVisible="{x:Static asControls:PathEnvVarEditorDialog.IsSupported}">
					<MenuItem.Icon>
						<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Edit.Outline}"/>
					</MenuItem.Icon>
				</MenuItem>
				<Separator IsVisible="{x:Static asControls:PathEnvVarEditorDialog.IsSupported}"/>
				<MenuItem Command="{Binding $parent[Window].EditConfiguration}" 
				          Header="{asXaml:StringResource SessionView.EditConfiguration}" 
				          IsVisible="{Binding $parent[UserControl].Application.IsDebugMode}">
					<MenuItem.Icon>
						<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Tool.Outline}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding $parent[Window].EditPersistentState}" 
				          Header="{asXaml:StringResource SessionView.EditPersistentState}" 
				          IsVisible="{Binding #root.Application.IsDebugMode}">
					<MenuItem.Icon>
						<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Tool.Outline}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding $parent[Window].Application.ShowSelfTestingWindow}" 
				          Header="{asXaml:StringResource Common.SelfTesting}" 
				          IsVisible="{Binding #root.Application.IsTestingMode}">
					<MenuItem.Icon>
						<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Lab}"/>
					</MenuItem.Icon>
				</MenuItem>
				<MenuItem Command="{Binding #root.TakeMemorySnapshot}" 
				          Header="{asXaml:StringResource Common.TakeMemorySnapshot.WithDialog}"
				          IsVisible="{Binding #root.Application.IsDebugMode}">
					<MenuItem.Icon>
						<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Memory.Outline}"/>
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding #root.Application.ShowQuickStartGuideWindow}" 
			          Header="{asXaml:StringResource SessionView.QuickStartGuide}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Lightbulb.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.Application.OpenFeedbackPage}" 
			          Header="{asXaml:StringResource Common.Feedback}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Chat.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding #root.Application.ShowApplicationInfoDialog}" 
			          Header="{asXaml:StringResource SessionView.AppInfo}">
				<MenuItem.Icon>
					<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Information.Outline}"/>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Test menu -->
		<ContextMenu x:Key="testMenu" Placement="Left">
			<MenuItem Command="{Binding #root.TestCommand}" CommandParameter="RestartApp" Header="Restart application"/>
			<MenuItem Command="{Binding #root.TestCommand}" CommandParameter="RestartRootWindows" Header="Restart root windows"/>
			<Separator/>
			<MenuItem Command="{Binding #root.TestCommand}" CommandParameter="ExportImageResource" Header="Export image resource"/>
			<Separator/>
			<MenuItem Command="{Binding #root.TestCommand}" CommandParameter="Test" Header="Test"/>
		</ContextMenu>

		<!-- Working directory menu -->
		<ContextMenu x:Key="workingDirectoryActionsMenu" Placement="Top">
			<MenuItem Command="{Binding #root.ShowWorkingDirectoryInExplorerCommand}" Header="{asXaml:StringResource SessionView.ShowWorkingDirectoryInExplorer}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{StaticResource Image/Icon.FileManager.Outline}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>
		
	</UserControl.Resources>

	<!-- Styles -->
	<UserControl.Styles>
		<Style Selector="ListBox.Log">
			<Setter Property="CornerRadius" Value="0"/>
			<Setter Property="Padding" Value="{StaticResource Thickness/SessionView.LogListBox.Padding}"/>
		</Style>
		<Style Selector="ListBox.Log > ListBoxItem">
			<Setter Property="CornerRadius" Value="0"/>
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="Margin" Value="0"/>
			<Setter Property="Padding" Value="0"/>
		</Style>
		<Style Selector="ListBox.Log > ListBoxItem:pressed /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
		</Style>
		<Style Selector="ListBox.Log > ListBoxItem:selected /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected}"/>
		</Style>
		<Style Selector="ListBox.Log > ListBoxItem:selected:pointerover /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Selected.PointerOver}"/>
		</Style>
		<Style Selector="ListBox.Log > ListBoxItem:selected:pressed /template/ ContentPresenter#PART_ContentPresenter">
			<Setter Property="Background" Value="{DynamicResource Brush/SessionView.LogListBox.Item.Background.Pressed}"/>
		</Style>
	</UserControl.Styles>
	
	<!-- Content -->
	<Grid Background="{DynamicResource Brush/Window.Background}" Name="RootGrid" RowDefinitions="Auto,*,Auto">

		<!-- Columns -->
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition MaxWidth="{x:Static appViewModels:Session.MaxSidePanelSize}" MinWidth="{x:Static appViewModels:Session.MinSidePanelSize}" Width="0"/>
			<ColumnDefinition Width="Auto"/>
		</Grid.ColumnDefinitions>

		<!-- Toolbar -->
		<Panel Grid.ColumnSpan="4">

			<!-- Toolbar -->
			<Border Name="toolBarContainer" Classes="ToolBar" BorderBrush="{DynamicResource Brush/ToolBar.Border}" BorderThickness="0,0,0,1">
				<WrapPanel>

					<!-- Log actions -->
					<StackPanel Name="toolBarLogActionItemsPanel" Orientation="Horizontal">

						<!-- Select log profiles -->
						<asControls:SplitButton Name="selectAndSetLogProfileButton"
						                              Classes="ToolBar_SplitButton"
						                              Command="{Binding #root.SelectAndSetLogProfileCommand}" 
						                              ToolTip.Tip="{asXaml:StringResource SessionView.SetLogProfile}">
							<Image Classes="Icon" Source="{StaticResource Image/LogProfile.Outline}"/>
						</asControls:SplitButton>

						<!-- Set working directory -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetWorkingDirectoryCommand}" 
						        IsVisible="{Binding CanSetWorkingDirectory}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetWorkingDirectory}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Folder.Outline}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsWorkingDirectoryNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>

						<!-- Add files -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.AddLogFilesCommand}" 
						        IsVisible="{Binding CanAddLogFile}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.AddLogFiles.WithShortcut}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.AddFile.Outline}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsLogFileNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>
						
						<!-- Set command -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetCommandCommand}" 
						        IsVisible="{Binding CanSetCommand}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetCommand}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Terminal.Outline}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsCommandNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>

						<!-- Set URI -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetUriCommand}" 
						        IsVisible="{Binding CanSetUri}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetUri}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Uri.Outline}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsUriNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>

						<!-- Set IP endpoint -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetIPEndPointCommand}" 
						        IsVisible="{Binding CanSetIPEndPoint}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetIPEndPoint}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/IPAddress.Outline}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsIPEndPointNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>
						
						<!-- Set process ID -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetProcessIdCommand}" 
						        IsVisible="{Binding CanSetProcessId}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetProcessId}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Process}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsProcessIdNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>
						
						<!-- Set process name -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.SelectAndSetProcessNameCommand}"
						        IsVisible="{Binding CanSetProcessName}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.SetProcessName}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Process}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding IsProcessNameNeeded}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Warning}"/>
								</Border>
							</Panel>
						</Button>

						<!-- Save logs -->
						<ToggleButton Name="logsSavingButton" 
						              Classes="ToolBar_ToggleButton" 
						              Command="{Binding #root.ShowLogsSavingMenu}" 
						              IsVisible="{Binding HasLogProfile}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.SaveLogs}">
							<ia:Interaction.Behaviors>
								<iaCore:DataTriggerBehavior Binding="{Binding $self.IsChecked}" Value="True">
									<iaCore:ChangePropertyAction PropertyName="ToolTip.Tip" Value="{x:Null}"/>
								</iaCore:DataTriggerBehavior>
							</ia:Interaction.Behaviors>
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Save.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.Save.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

						<!-- Clear files -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding ClearLogFilesCommand}" 
						        IsVisible="{Binding IsLogFileSupported}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.ClearLogFiles}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Delete.Outline}"/>
						</Button>
						
						<!-- Stop reading logs (non-continuous reading) -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding StopReadingLogsCommand}" 
						        IsVisible="{asXaml:AndBindings {Binding CanStopReadingLogs}, {Binding !IsReadingLogsContinuously}}"
						        ToolTip.Tip="{asXaml:StringResource SessionView.StopReadingLogs}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
						</Button>

						<!-- Reload logs -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding #root.ReloadLogsCommand}" 
						        IsVisible="{asXaml:OrBindings {Binding !CanStopReadingLogs}, {Binding IsReadingLogsContinuously}}"
						        ToolTip.Tip="{asXaml:StringResource SessionView.ReloadLogs}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Refresh}"/>
						</Button>

						<!-- Pause/Resume -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding PauseResumeLogsReadingCommand}"
						        IsEnabled="{asXaml:OrBindings {Binding IsLogsReadingPaused}, {Binding IsReadingLogs}}"
						        IsVisible="{Binding IsReadingLogsContinuously}" 
						        ToolTip.Tip="{asXaml:StringResource SessionView.PauseResumeLogsReading}">
							<Panel>
								<Image Classes="Icon" IsVisible="{Binding !IsLogsReadingPaused}" Source="{DynamicResource Image/Icon.PauseMedia.Outline}"/>
								<Image Classes="Icon" IsVisible="{Binding IsLogsReadingPaused}">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/Icon.OK}" Geometry="{DynamicResource Geometry/Icon.PlayMedia.Outline}"/>
									</DrawingImage>
								</Image>
							</Panel>
						</Button>
						
						<!-- Stop reading logs (continuous reading) -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding StopReadingLogsCommand}" 
						        IsVisible="{Binding IsReadingLogsContinuously}"
						        ToolTip.Tip="{asXaml:StringResource SessionView.StopReadingLogs}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.StopMedia.Outline}"/>
						</Button>
						
						<!-- Separator -->
						<Separator Classes="ToolBar_Separator"
						           IsVisible="{Binding #disableLogPatternsButton.IsVisible}"/>
						
						<!-- Disable log patterns -->
						<ToggleButton Name="disableLogPatternsButton" 
						              Classes="ToolBar_ToggleButton"
						              Command="{Binding ToggleShowingRawLogLinesTemporarilyCommand}"
						              IsChecked="{Binding IsShowingRawLogLinesTemporarily}"
						              IsVisible="{Binding HasLogPatterns}"
						              ToolTip.Tip="{asXaml:StringResource SessionView.ShowRawLogLinesTemporarily}">
							<Image Classes="Icon" Source="{DynamicResource Image/ShowRawLogLines}"/>
						</ToggleButton>

					</StackPanel>

					<!-- Other log filters -->
					<StackPanel Name="toolBarOtherLogFilterItemsPanel" Orientation="Horizontal">

						<!-- Level filter -->
						<ComboBox Name="logLevelFilterComboBox" 
						          Classes="ToolBar_ComboBox"
						          IsEnabled="{Binding #root.HasLogProfile}"
						          IsVisible="{Binding $self.ItemCount}" 
						          ItemsSource="{Binding #root.ValidLogLevels}" 
						          SelectedItem="{Binding LogFiltering.LevelFilter, FallbackValue={x:Static appLogs:LogLevel.Undefined}, Mode=TwoWay}" 
						          ToolTip.Tip="{asXaml:StringResource SessionView.LogLevelFilter.Description}" 
						          VerticalAlignment="Center">
							<ComboBox.ItemTemplate>
								<DataTemplate>
									<Panel>
										<TextBlock Classes="ComboBoxItem_TextBlock" Opacity="0" Text=" "/>
										<StackPanel Orientation="Horizontal">
											<Border Classes="ComboBoxItem_Icon" Background="{Binding Converter={x:Static appConverters:LogLevelBrushConverter.Background}}" BorderBrush="{DynamicResource ComboBoxItemForeground}" BorderThickness="1"/>
											<TextBlock Classes="ComboBoxItem_TextBlock" Text="{Binding Converter={x:Static appControls:SessionView.LogLevelNameConverter}}" VerticalAlignment="Center"/>
										</StackPanel>
									</Panel>
								</DataTemplate>
							</ComboBox.ItemTemplate>
							<ComboBox.Styles>
								<Style Selector="ComboBox /template/ ContentControl#ContentPresenter > Panel > StackPanel > TextBlock:nth-child(2)">
									<Setter Property="IsVisible" Value="False"/>
								</Style>
							</ComboBox.Styles>
						</ComboBox>

						<!-- PID filter -->
						<abControls:IntegerTextBox Name="logProcessIdFilterTextBox" 
						                           Classes="ToolBar_TextBox" 
						                           IsEnabled="{Binding #root.HasLogProfile}" 
						                           IsVisible="{Binding LogFiltering.IsProcessIdFilterEnabled}" 
						                           Maximum="2147483647" 
						                           Minimum="0" 
						                           ToolTip.Tip="{asXaml:StringResource SessionView.LogProcessIdFilter.Description}" 
						                           Value="{Binding LogFiltering.ProcessIdFilter, Mode=TwoWay}" 
						                           VerticalAlignment="Center" 
						                           Watermark="{asXaml:StringResource LogProperty.ProcessId}"
						                           Width="{StaticResource Double/SessionView.ToolBar.LogProcessIdFilter.Width}">
							<abControls:IntegerTextBox.InnerRightContent>
								<Panel Classes="TextBox_InPlaceActions">
									<Button Classes="TextBox_InPlaceAction" Command="{Binding #logProcessIdFilterTextBox.Clear}" IsVisible="{Binding #logProcessIdFilterTextBox.Text, Converter={x:Static StringConverters.IsNotNullOrEmpty}}" ToolTip.Tip="{asXaml:StringResource Common.Clear}">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
									</Button>
								</Panel>
							</abControls:IntegerTextBox.InnerRightContent>
						</abControls:IntegerTextBox>

						<!-- TID filter -->
						<abControls:IntegerTextBox Name="logThreadIdFilterTextBox" 
						                           Classes="ToolBar_TextBox" 
						                           IsEnabled="{Binding #root.HasLogProfile}" 
						                           IsVisible="{Binding LogFiltering.IsThreadIdFilterEnabled}"
						                           Maximum="2147483647" 
						                           Minimum="0" 
						                           ToolTip.Tip="{asXaml:StringResource SessionView.LogThreadIdFilter.Description}" 
						                           Value="{Binding LogFiltering.ThreadIdFilter, Mode=TwoWay}" 
						                           Watermark="{asXaml:StringResource LogProperty.ThreadId}"
						                           Width="{StaticResource Double/SessionView.ToolBar.LogProcessIdFilter.Width}">
							<abControls:IntegerTextBox.InnerRightContent>
								<Panel Classes="TextBox_InPlaceActions">
									<Button Classes="TextBox_InPlaceAction" Command="{Binding #logThreadIdFilterTextBox.Clear}" IsVisible="{Binding #logThreadIdFilterTextBox.Text, Converter={x:Static StringConverters.IsNotNullOrEmpty}}" ToolTip.Tip="{asXaml:StringResource Common.Clear}">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
									</Button>
								</Panel>
							</abControls:IntegerTextBox.InnerRightContent>
						</abControls:IntegerTextBox>

						<!-- Filters combination mode -->
						<ToggleButton Name="logFilterCombinationModeButton" 
						              Classes="ToolBar_ToggleButton" 
						              Command="{Binding #root.ShowLogFiltersCombinationModeMenu}" 
						              IsVisible="{Binding #root.CanFilterLogsByNonTextFilters}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.LogFiltersCombinationMode}">
							<Panel>
								<asControls:Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/Icon}" Geometry="{Binding LogFiltering.FiltersCombinationMode, Converter={x:Static appControls:SessionView.LogFilterCombinationModeIconConverter}}"/>
									</DrawingImage>
								</asControls:Image>
								<asControls:Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{Binding LogFiltering.FiltersCombinationMode, Converter={x:Static appControls:SessionView.LogFilterCombinationModeIconConverter}}"/>
									</DrawingImage>
								</asControls:Image>
							</Panel>
						</ToggleButton>
						
					</StackPanel>

					<!-- Log text filters -->
					<Grid Name="toolBarLogTextFilterItemsPanel" ColumnDefinitions="*,Auto">

						<!-- Text filter -->
						<asControls:RegexTextBox Name="logTextFilterTextBox" 
						                         Classes="ToolBar_TextBox RegexTextBox_InvalidText"
						                         FontFamily="{Binding PatternFontFamily, Source={x:Static appControls:ControlFonts.Default}}" 
						                         HorizontalAlignment="Stretch"
						                         IgnoreCase="{Binding LogFiltering.IgnoreTextFilterCase}" 
						                         IsEnabled="{Binding #root.HasLogProfile}" 
						                         Margin="{StaticResource Thickness/ToolBar.Item.Margin}"
						                         MaxLines="1"
						                         Object="{Binding LogFiltering.TextFilter, Mode=TwoWay}" 
						                         TextWrapping="NoWrap"
						                         ToolTip.Tip="{asXaml:StringResource SessionView.LogTextFilter.ToolTip}"
						                         Watermark="{asXaml:StringResource SessionView.LogTextFilter.Watermark}">
							<asControls:RegexTextBox.InnerRightContent>
								<StackPanel Classes="TextBox_InPlaceActions">
									<Button Name="clearLogTextFilterButton" Classes="TextBox_InPlaceAction" Command="{Binding #logTextFilterTextBox.Clear}" IsVisible="{Binding #logTextFilterTextBox.Text, Converter={x:Static StringConverters.IsNotNullOrEmpty}}" ToolTip.Tip="{asXaml:StringResource Common.Clear}">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Close}"/>
									</Button>
									<ToggleButton Name="ignoreLogTextFilterCaseButton" Classes="TextBox_InPlaceAction" IsChecked="{Binding LogFiltering.IgnoreTextFilterCase, Mode=TwoWay}" IsEnabled="{Binding #root.HasLogProfile}" ToolTip.Tip="{asXaml:StringResource SessionView.IgnoreLogTextFilterCase}">
										<Panel>
											<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/IgnoreCase}"/>
											<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/IgnoreCase.Light}"/>
										</Panel>
									</ToggleButton>
									<Button Name="logFilteringHelpButton" Classes="TextBox_InPlaceAction" Command="{Binding #root.OpenLogFilteringDocumentation}" IsVisible="{Binding #root.ShowHelpButtonOnLogTextFilter}" ToolTip.Tip="{asXaml:StringResource Common.Help}">
										<Image Classes="Icon" Source="{StaticResource Image/Icon.Question.Outline}"/>
									</Button>
								</StackPanel>
							</asControls:RegexTextBox.InnerRightContent>
						</asControls:RegexTextBox>

						<!-- Predefined text filters -->
						<ToggleButton Name="predefinedLogTextFiltersButton" 
						              Classes="ToolBar_ToggleButton" 
						              Grid.Column="1" 
						              IsEnabled="{Binding #root.HasLogProfile}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.PredefinedLogTextFilters}">
							<Panel>
								<Panel>
									<Panel IsVisible="{Binding !#root.HasSelectedPredefinedLogTextFilters}">
										<Image Classes="Icon" Source="{StaticResource Image/Filters.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
										<Image Classes="Icon" Source="{StaticResource Image/Filters.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
									</Panel>
									<Panel IsVisible="{Binding #root.HasSelectedPredefinedLogTextFilters}">
										<Image Classes="Icon" Source="{StaticResource Image/Filters.Active}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
										<Image Classes="Icon" Source="{StaticResource Image/Filters.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
									</Panel>
								</Panel>
								<Popup Name="predefinedLogTextFiltersPopup" IsLightDismissEnabled="True" IsOpen="{Binding $parent[ToggleButton].IsChecked, Mode=TwoWay}" PlacementTarget="{Binding $parent[ToggleButton]}" Width="{StaticResource Double/SessionView.PredefinedLogTextFiltersPopup.Width}" WindowManagerAddShadowHint="False">
									<Border Background="{DynamicResource ComboBoxDropDownBackground}" BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}" BorderThickness="{DynamicResource Thickness/SessionView.PredefinedLogTextFiltersPopup.Border}" CornerRadius="{DynamicResource OverlayCornerRadius}" Padding="{StaticResource Thickness/SessionView.PredefinedLogTextFiltersPopup.Padding}">
										<StackPanel>
											<asControls:DialogItem ItemSize="Small">
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{asXaml:StringResource SessionView.PredefinedLogTextFiltersPopup.Header}"/>
											</asControls:DialogItem>
											<Line Classes="Dialog_Item_Separator_Inner" IsVisible="{Binding !Groups.Count, Source={x:Static appViewModels:PredefinedLogTextFilterManager.Default}}"/>
											<Grid RowDefinitions="*,Auto,Auto">
												<ScrollViewer MaxHeight="{StaticResource Double/SessionView.PredefinedLogTextFilterListBox.MaxHeight}" MinHeight="{StaticResource Double/SessionView.PredefinedLogTextFilterListBox.MinHeight}">
													<StackPanel Name="predefinedLogTextFiltersAndGroupsPanel">
														<StackPanel.DataTemplates>
															<DataTemplate DataType="{x:Type appViewModels:PredefinedLogTextFilter}">
																<Border Background="{x:Static Brushes.Transparent}" Padding="{StaticResource Thickness/SessionView.PredefinedLogTextFilterListBox.Item.Padding}">
																	<ToolTip.Tip>
																		<asControls:SyntaxHighlightingTextBlock DefinitionSet="{Binding #root.RegexSyntaxHighlightingDefinitionSet}" FontFamily="{Binding PatternFontFamily, Source={x:Static appControls:ControlFonts.Default}}" Text="{Binding Regex}"/>
																	</ToolTip.Tip>
																	<Grid ColumnDefinitions="Auto,*,Auto">
																		<Panel Height="{StaticResource Double/SessionView.PredefinedLogTextFilterListBox.Icon.Size}" Margin="{StaticResource Thickness/SessionView.PredefinedLogTextFilterListBox.Icon.Margin}" Width="{StaticResource Double/SessionView.PredefinedLogTextFilterListBox.Icon.Size}">
																			<Image Classes="Icon" IsVisible="{Binding !$parent[ListBoxItem].IsSelected}" Source="{Binding Mode, Converter={x:Static appControls:SessionView.PredefinedLogTextFilterIconConverter}}"/>
																			<Image Classes="Icon" IsVisible="{Binding $parent[ListBoxItem].IsSelected}" Source="{Binding Mode, Converter={x:Static appControls:SessionView.PredefinedLogTextFilterIconConverter}, ConverterParameter=Selected}"/>
																		</Panel>
																		<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																		<Border Classes="InPlaceAction_Reserved" Grid.Column="1"/>
																		<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																			<Button Classes="InPlaceAction_Button" Command="{Binding #root.RemovePredefinedLogTextFilterCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Delete}">
																				<asControls:Image Classes="InPlaceAction_Icon">
																					<DrawingImage>
																						<GeometryDrawing Brush="{Binding $parent[ListBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
																					</DrawingImage>
																				</asControls:Image>
																			</Button>
																			<Button Classes="InPlaceAction_Button" Command="{Binding #root.CopyPredefinedLogTextFilterCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Copy}">
																				<asControls:Image Classes="InPlaceAction_Icon">
																					<DrawingImage>
																						<GeometryDrawing Brush="{Binding $parent[ListBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
																					</DrawingImage>
																				</asControls:Image>
																			</Button>
																			<Button Classes="InPlaceAction_Button" Command="{Binding #root.EditPredefinedLogTextFilterCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Edit}">
																				<asControls:Image Classes="InPlaceAction_Icon">
																					<DrawingImage>
																						<GeometryDrawing Brush="{Binding $parent[ListBoxItem].Foreground}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
																					</DrawingImage>
																				</asControls:Image>
																			</Button>
																		</StackPanel>
																	</Grid>
																</Border>
															</DataTemplate>
															<DataTemplate DataType="{x:Type appViewModels:PredefinedLogTextFilterGroup}">
																<Expander Background="{x:Null}" HorizontalAlignment="Stretch" IsExpanded="False" Margin="{StaticResource Thickness/SessionView.PredefinedLogTextFilterGroup.Margin}" Padding="{StaticResource Thickness/SessionView.PredefinedLogTextFilterGroup.Padding}">
																	<Expander.Header>
																		<Grid Name="rootGrid" Background="{x:Static Brushes.Transparent}" ColumnDefinitions="Auto,*,Auto" HorizontalAlignment="Stretch">
																			<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#textFilterListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Icon.Folder.Outline}"/>
																			<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #textFilterListBox.SelectedItems.Count, FallbackValue=False}">
																				<DrawingImage>
																					<GeometryDrawing Brush="{DynamicResource Brush/Icon.Active}" Geometry="{StaticResource Geometry/Icon.Folder.Outline}"/>
																				</DrawingImage>
																			</Image>
																			<abControls:FormattedTextBlock Arg1="{Binding Name}" Arg2="{Binding #textFilterListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #textFilterListBox.ItemCount}" Format="{}{0} ({1}/{2})" Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
																			<Button Classes="InPlaceAction_Button" Command="{Binding #root.RenamePredefinedLogTextFilterGroupCommand}" CommandParameter="{Binding}" Grid.Column="2" IsVisible="{Binding #rootGrid.IsPointerOver}" ToolTip.Tip="{asXaml:StringResource Common.Rename}">
																				<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit.Outline}"/>
																			</Button>
																		</Grid>
																	</Expander.Header>
																	<ListBox Name="textFilterListBox" ItemsSource="{Binding Filters}" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" SelectionMode="Multiple"/>
																</Expander>
															</DataTemplate>
														</StackPanel.DataTemplates>
														<StackPanel.Styles>
															<Style Selector="ListBox">
																<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
																<Setter Property="BorderThickness" Value="0"/>
																<Setter Property="Padding" Value="0"/>
															</Style>
															<Style Selector="ListBoxItem">
																<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
																<Setter Property="Padding" Value="0"/>
															</Style>
														</StackPanel.Styles>
														<asControls:GroupBox IsVisible="{Binding Groups.Count, Source={x:Static appViewModels:PredefinedLogTextFilterManager.Default}}" Margin="{StaticResource Thickness/SessionView.PredefinedLogTextFilterGroup.Margin}" Padding="0">
															<asControls:GroupBox.Header>
																<Grid ColumnDefinitions="Auto,*">
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#predefinedLogTextFilterListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Filters.Outline}"/>
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #predefinedLogTextFilterListBox.SelectedItems.Count, FallbackValue=False}" Source="{StaticResource Image/Filters.Outline.Active}"/>
																	<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.PredefinedLogTextFiltersPopup.DefaultGroup}" Arg2="{Binding #predefinedLogTextFilterListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #predefinedLogTextFilterListBox.ItemCount}" Format="{}{0} ({1}/{2})" Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
																</Grid>
															</asControls:GroupBox.Header>
														</asControls:GroupBox>
														<Border ClipToBounds="False" Margin="{StaticResource Thickness/SessionView.PredefinedLogTextFilterGroup.Padding}">
															<ListBox Name="predefinedLogTextFilterListBox" IsVisible="{Binding $self.ItemCount}" ItemsSource="{Binding DefaultGroup.Filters, Source={x:Static appViewModels:PredefinedLogTextFilterManager.Default}}" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" SelectionMode="Multiple"/>
														</Border>
													</StackPanel>
												</ScrollViewer>
												<TextBlock Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}" 
												           HorizontalAlignment="Center" 
												           IsVisible="{asXaml:AndBindings
												               {Binding !DefaultGroup.Filters.Count, Source={x:Static appViewModels:PredefinedLogTextFilterManager.Default}, Converter={x:Static DefaultValueConverter.Instance}},
												               {Binding !Groups.Count, Source={x:Static appViewModels:PredefinedLogTextFilterManager.Default}, Converter={x:Static DefaultValueConverter.Instance}}
												           }"
												           Margin="{StaticResource Thickness/SessionView.NoPredefinedLogTextFilterHint.Margin}" 
												           Text="{asXaml:StringResource Common.Empty}" 
												           TextWrapping="Wrap" 
												           VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small" Grid.Row="1"/>
												<Grid ColumnDefinitions="Auto,*" Grid.Row="2">
													<StackPanel Orientation="Horizontal">
														<Button Classes="Dialog_Item_Button" Command="{Binding #root.OpenPredefinedTextFiltersDocumentation}" Content="{asXaml:StringResource Common.Help}"/>
														<Separator Classes="Dialog_Separator"/>
													</StackPanel>
													<StackPanel Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
														<Button Classes="Dialog_Item_Button" Command="{Binding #root.ClearPredefinedLogTextFilterSelection}" Content="{asXaml:StringResource SessionView.ClearPredefinedLogTextFiltersSelection}" IsEnabled="{Binding #root.HasSelectedPredefinedLogTextFilters}"/>
														<Separator Classes="Dialog_Separator_Small"/>
														<Button Classes="Dialog_Item_Button" Command="{Binding #root.CreatePredefinedLogTextFilter}" Content="{asXaml:StringResource Common.Create.WithDialog}"/>
													</StackPanel>
												</Grid>
											</Grid>
										</StackPanel>
									</Border>
								</Popup>
							</Panel>
						</ToggleButton>
					
					</Grid>

					<!-- Other items -->
					<StackPanel Name="toolBarOtherItemsPanel" Orientation="Horizontal">

						<!-- Reset log filters -->
						<Button Classes="ToolBar_Button" 
						        Command="{Binding LogFiltering.ResetFiltersCommand}"
						        ToolTip.Tip="{asXaml:StringResource SessionView.ResetLogFilters}">
							<Image Classes="Icon" Source="{StaticResource Image/ClearFilters.Outline}"/>
						</Button>
						
						<!-- Show marked logs temporarily -->
						<ToggleButton Name="showMarkedLogsOnlyButton" 
						              Classes="ToolBar_ToggleButton" 
						              Command="{Binding ToggleShowingMarkedLogsTemporarilyCommand}"
						              IsChecked="{Binding IsShowingMarkedLogsTemporarily, Mode=OneWay}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.ShowMarkedLogsTemporarily}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/MarkedOnly.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/MarkedOnly.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>
						
						<!-- Show all logs temporarily -->
						<ToggleButton Name="showAllLogsTemporarilyButton"
						              Classes="ToolBar_ToggleButton" 
						              Command="{Binding ToggleShowingAllLogsTemporarilyCommand}"
						              IsChecked="{Binding IsShowingAllLogsTemporarily, Mode=OneWay}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.ShowAllLogsTemporarily}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Visibility.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Visibility.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							</Panel>
						</ToggleButton>

						<!-- Separator -->
						<Separator Classes="ToolBar_Separator" 
						           IsVisible="{Binding #otherActionsButton.IsVisible}"/>

						<!-- Other actions -->
						<ToggleButton Name="otherActionsButton"
						              Classes="ToolBar_ToggleButton" 
						              Command="{Binding #root.ShowOtherActions}" 
						              IsVisible="{x:Static cs:Platform.IsNotMacOS}" 
						              ToolTip.Tip="{asXaml:StringResource SessionView.OtherActions}">
							<Panel>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.More}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
								<Image Classes="Icon" Source="{StaticResource Image/Icon.More.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
								<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding $parent[Window].Application.UpdateInfo, Converter={x:Static ObjectConverters.IsNotNull}}">
									<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.Update.Colored}"/>
								</Border>
							</Panel>
						</ToggleButton>

					</StackPanel>

				</WrapPanel>
			</Border>

			<!-- Progress bar -->
			<ProgressBar Background="{x:Null}" 
			             CornerRadius="0" 
			             IsIndeterminate="{asXaml:OrBindings {Binding IsReadingLogs}, {Binding IsRemovingLogFiles}}"
			             Margin="0,0,0,1" 
			             MaxHeight="{StaticResource Double/SessionView.LogsProgressBar.Height}" 
			             MinHeight="{StaticResource Double/SessionView.LogsProgressBar.Height}" 
			             Maximum="1"
			             Minimum="0"
			             Value="{Binding LogFiltering.FilteringProgress}"
			             VerticalAlignment="Bottom">
				<ProgressBar.IsVisible>
					<MultiBinding Converter="{x:Static BoolConverters.And}">
						<Binding Path="IsProcessingLogs"/>
						<MultiBinding Converter="{x:Static BoolConverters.Or}">
							<Binding Path="!IsReadingLogsContinuously"/>
							<MultiBinding Converter="{x:Static BoolConverters.And}">
								<Binding Path="!IsReadingLogs"/>
								<Binding Path="LogFiltering.IsFiltering"/>
							</MultiBinding>
						</MultiBinding>
					</MultiBinding>
				</ProgressBar.IsVisible>
			</ProgressBar>
			
		</Panel>

		<!-- Logs -->
		<Grid Name="logListBoxContainer" Background="{DynamicResource Brush/WorkingArea.Background}" DragDrop.AllowDrop="True" Grid.Row="1">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/> <!-- Header -->
				<RowDefinition Height="*" MinHeight="100"/> <!-- Logs -->
				<RowDefinition Height="Auto"/> <!-- Separator -->
				<RowDefinition Height="0"/> <!-- Chart -->
				<RowDefinition Height="Auto"/> <!-- Time information -->
			</Grid.RowDefinitions>

			<!-- Header -->
			<Panel Background="{DynamicResource Brush/SessionView.LogHeader.Background}">

				<!-- Columns -->
				<Grid Name="logHeaderContainer">
					<Grid.Styles>
						<Style Selector="GridSplitter">
							<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
							<Setter Property="HorizontalAlignment" Value="Stretch"/>
							<Setter Property="VerticalAlignment" Value="Stretch"/>
						</Style>
						<Style Selector="GridSplitter /template/ Border#PART_Root">
							<Setter Property="Transitions" Value="{x:Null}"/>
						</Style>
						<Style Selector="GridSplitter:pointerover /template/ Border#PART_Root">
							<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
							<Setter Property="Transitions" Value="{x:Null}"/>
						</Style>
						<Style Selector="GridSplitter:pressed /template/ Border#PART_Root">
							<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
							<Setter Property="Transitions" Value="{x:Null}"/>
						</Style>
					</Grid.Styles>
					<TextBlock Margin="{StaticResource Thickness/SessionView.LogHeader.Margin}" Padding="{StaticResource Thickness/SessionView.LogHeader.Padding}" Text=" "/>
					<Grid Name="logHeaderGrid"/>
				</Grid>

				<!-- Actions -->
				<Border Background="{DynamicResource Brush/SessionView.LogHeader.Background}" HorizontalAlignment="Right" VerticalAlignment="Center">
					<StackPanel Margin="{StaticResource Thickness/SessionView.SidePanel.Header.Padding}" Orientation="Horizontal">
						
						<!-- Select log by timestamp -->
						<Button Classes="ToolBar_Button_Small" Command="{Binding #root.SelectNearestLogByTimestamp}" IsEnabled="{Binding HasLogs}" IsVisible="{Binding AreLogsSortedByTimestamp}" ToolTip.Tip="{asXaml:StringResource SessionView.SelectNearestLogByTimestamp}">
							<Image Classes="Icon" Source="{StaticResource Image/FindDate}"/>
						</Button>

						<!-- Scroll to latest log -->
						<ToggleButton Classes="ToolBar_ToggleButton_Small" IsChecked="{Binding #root.IsScrollingToLatestLogNeeded, Mode=TwoWay}" IsEnabled="{Binding #root.HasLogProfile}" ToolTip.Tip="{asXaml:StringResource SessionView.ScrollToLatestLog}">
							<Panel>
								<Panel Name="scrollToBottomLogIconPanel" IsVisible="{Binding LogProfile.SortDirection, Converter={x:Static abConverters:ObjectConverters.IsEquivalentTo}, ConverterParameter={x:Static app:SortDirection.Ascending}}">
									<Image Classes="Icon" Source="{StaticResource Image/ToBottom}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
									<Image Classes="Icon" Source="{StaticResource Image/ToBottom.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
								</Panel>
								<Panel IsVisible="{Binding !#scrollToBottomLogIconPanel.IsVisible}">
									<Image Classes="Icon" Source="{StaticResource Image/ToTop}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
									<Image Classes="Icon" Source="{StaticResource Image/ToTop.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
								</Panel>
							</Panel>
						</ToggleButton>

					</StackPanel>
				</Border>
				
				<!-- Border -->
				<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False"/>
				
			</Panel>

			<!-- ListBox -->
			<appControls:SimpleListBox Classes="Log" 
			                    Name="logListBox" 
			                    AutoScrollToSelectedItem="False" 
			                    Background="{x:Static Brushes.Transparent}" 
			                    BorderThickness="0" 
			                    ContextMenu="{StaticResource logActionMenu}" 
			                    CornerRadius="0" DoubleClickOnItem="OnLogListBoxDoubleClickOnItem" 
			                    Focusable="True" 
			                    Grid.Row="1" 
			                    HorizontalAlignment="Stretch" 
			                    IsEnabled="{Binding #root.HasLogProfile}" 
			                    ScrollViewer.HorizontalScrollBarVisibility="Visible" 
			                    SelectedItems="{Binding LogSelection.SelectedLogs}" 
			                    SelectionChanged="OnLogListBoxSelectionChanged" 
			                    SelectionMode="Multiple">
				<appControls:SimpleListBox.ItemsPanel>
					<ItemsPanelTemplate>
						<appControls:SimpleVirtualizingStackPanel ItemHeight="{Binding #root.LogItemHeight}"/>
					</ItemsPanelTemplate>
				</appControls:SimpleListBox.ItemsPanel>
				<appControls:SimpleListBox.Resources>
					<sys:Double x:Key="ToolTipContentMaxWidth">400</sys:Double>
				</appControls:SimpleListBox.Resources>
				<appControls:SimpleListBox.Styles>
					<Style Selector="ListBoxItem">
						<Setter Property="ClipToBounds" Value="False"/>
					</Style>
				</appControls:SimpleListBox.Styles>
			</appControls:SimpleListBox>

			<!-- Hints -->
			<Viewbox Grid.Row="1" Margin="{StaticResource Thickness/SessionView.Hint.Margin}" Stretch="Uniform" StretchDirection="DownOnly">
				<Panel>

					<!-- Hint: no log to show -->
					<Border IsVisible="{Binding !HasLogs}">
						<TextBlock FontSize="{StaticResource Double/SessionView.Hint.NoLogToShow.FontSize}" HorizontalAlignment="Center" IsVisible="{Binding #root.HasLogProfile}" Text="{asXaml:StringResource SessionView.Hint.NoLogToShow}" TextWrapping="Wrap" VerticalAlignment="Center"/>
					</Border>

					<!-- Hint: select log profile -->
					<StackPanel HorizontalAlignment="Center" IsVisible="{Binding !#root.HasLogProfile}" Orientation="Horizontal">
						<TextBlock FontSize="{StaticResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Text="{asXaml:StringResource SessionView.Hint.SelectLogProfile.Section1}" TextWrapping="NoWrap" VerticalAlignment="Center"/>
						<Border Height="{StaticResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Margin="{StaticResource Thickness/SessionView.Hint.SelectLogProfile.Icon.Margin}" VerticalAlignment="Center" Width="{StaticResource Double/SessionView.Hint.SelectLogProfile.FontSize}">
							<Image Classes="Icon" Source="{StaticResource Image/LogProfile.Outline}"/>
						</Border>
						<TextBlock FontSize="{StaticResource Double/SessionView.Hint.SelectLogProfile.FontSize}" Text="{asXaml:StringResource SessionView.Hint.SelectLogProfile.Section2}" TextWrapping="NoWrap" VerticalAlignment="Center"/>
					</StackPanel>

				</Panel>
			</Viewbox>
			
			<!-- Chart -->
			<Border Grid.Row="2" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False" IsVisible="{Binding LogChart.IsPanelVisible}"/>
			<GridSplitter Classes="GridSplitter_Horizontal" Background="{x:Static Brushes.Transparent}" Grid.Row="2" IsVisible="False"/>
			<DockPanel Name="logChartPanel" Grid.Row="3" IsVisible="False">
				
				<!-- Tool bar -->
				<Border Name="logChartToolBar" Classes="ToolBar_Small" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Border}" BorderThickness="1,0,0,0" DockPanel.Dock="Right" IsEnabled="{Binding #logChart.IsVisible}">
					<StackPanel>
						
						<!-- Reset zoom -->
						<Button Classes="ToolBar_Button_Small" Command="{Binding #root.ResetLogChartZoom}" IsEnabled="{Binding #root.IsLogChartHorizontallyZoomed}" ToolTip.Tip="{asXaml:StringResource SessionView.ResetLogChartZoom}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.Collapse}"/>
						</Button>
						
						<!-- Scroll to start -->
						<Button Classes="ToolBar_Button_Small" Command="{Binding #root.ScrollToStartOfLogChart}" IsEnabled="{Binding #root.IsLogChartHorizontallyZoomed}" ToolTip.Tip="{asXaml:StringResource SessionView.ScrollToStartOfLogChart}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.FastBackward}"/>
						</Button>
						
						<!-- Scroll to end -->
						<Button Classes="ToolBar_Button_Small" Command="{Binding #root.ScrollToEndOfLogChart}" IsEnabled="{Binding #root.IsLogChartHorizontallyZoomed}" ToolTip.Tip="{asXaml:StringResource SessionView.ScrollToEndOfLogChart}">
							<Image Classes="Icon" Source="{StaticResource Image/Icon.FastForward}"/>
						</Button>
						
						<Separator Classes="ToolBar_Separator_Horizontal_Small"/>
						
						<!-- Visible series -->
						<ToggleButton Name="visibleLogChartSeriesButton" Classes="ToolBar_ToggleButton_Small" Command="{Binding #root.SelectVisibleLogChartSeries}" ToolTip.Tip="{asXaml:StringResource SessionView.VisibleLogChartSeries}">
							<Panel>
								<Panel IsVisible="{Binding LogChart.AreAllSeriesSourcesVisible}">
									<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Outline}"/>
									<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Outline.Light}"/>
								</Panel>
								<Panel IsVisible="{Binding !LogChart.AreAllSeriesSourcesVisible}">
									<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Active}"/>
									<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Filter.Light}"/>
								</Panel>
							</Panel>
						</ToggleButton>
						
						<!-- Type of chart -->
						<ToggleButton Name="logChartTypeButton" Classes="ToolBar_ToggleButton_Small" Command="{Binding #root.ShowLogChartTypeMenu}" ToolTip.Tip="{asXaml:StringResource SessionView.SetLogChartType}">
							<Panel>
								<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{Binding LogChart.ChartType, Converter={x:Static appConverters:LogChartTypeIconConverter.Outline}}"/>
								<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{Binding LogChart.ChartType, Converter={x:Static appConverters:LogChartTypeIconConverter.Outline}, ConverterParameter=Light}"/>
							</Panel>
						</ToggleButton>
						
					</StackPanel>
				</Border>
				
				<!-- Chart and hint -->
				<Panel>
				
					<!-- Chart -->
					<lvc:CartesianChart Name="logChart" 
					                    AnimationsSpeed="{StaticResource TimeSpan/Animation.Fast}"
					                    Background="{x:Static Brushes.Transparent}" 
					                    IsVisible="{asXaml:AndBindings 
					                        {Binding IsProVersionActivated}, 
					                        {Binding !LogChart.IsMaxTotalSeriesValueCountReached},
					                        {Binding !IsShowingRawLogLinesTemporarily}
					                    }"
					                    LegendBackgroundPaint="{Binding #root.LogChartLegendBackgroundPaint}"
					                    LegendPosition="Right"
					                    LegendTextPaint="{Binding #root.LogChartLegendForegroundPaint}"
					                    LegendTextSize="{StaticResource Double/SessionView.LogChart.Legend.FontSize}"
					                    Series="{Binding #root.LogChartSeries}" 
					                    TooltipBackgroundPaint="{Binding #root.LogChartToolTipBackgroundPaint}" 
					                    TooltipTextPaint="{Binding #root.LogChartToolTipForegroundPaint}" 
					                    TooltipTextSize="{StaticResource Double/SessionView.LogChart.ToolTip.FontSize}"
					                    XAxes="{Binding #root.LogChartXAxes}"
					                    YAxes="{Binding #root.LogChartYAxes}"/>
					
					<!-- Hint -->
					<Border IsVisible="{asXaml:AndBindings 
					                       {Binding IsProVersionActivated}, 
					                       {Binding LogChart.IsMaxTotalSeriesValueCountReached},
					                       {Binding !IsShowingRawLogLinesTemporarily}
					                   }">
						<TextBlock HorizontalAlignment="Center" 
						           Margin="{StaticResource Thickness/SessionView.LogChartPanel.FullPanelHint.Text.Margin}" 
						           Text="{asXaml:StringResource SessionView.LogChartPanel.MaxTotalSeriesValueCountReached}" 
						           TextWrapping="WrapWithOverflow" 
						           VerticalAlignment="Center"/>
					</Border>
					<Border IsVisible="{asXaml:AndBindings 
					                       {Binding IsProVersionActivated},
					                       {Binding IsShowingRawLogLinesTemporarily}
					                   }">
						<TextBlock HorizontalAlignment="Center" 
						           Margin="{StaticResource Thickness/SessionView.LogChartPanel.FullPanelHint.Text.Margin}" 
						           Text="{asXaml:StringResource SessionView.LogChartPanel.ShowingRawLogLines}" 
						           TextWrapping="WrapWithOverflow" 
						           VerticalAlignment="Center"/>
					</Border>
					<Border IsVisible="{Binding !IsProVersionActivated}">
						<TextBlock HorizontalAlignment="Center" 
						           Margin="{StaticResource Thickness/SessionView.LogChartPanel.FullPanelHint.Text.Margin}" 
						           Text="{asXaml:StringResource SessionView.LogChartPanel.ProVersionNeeded}" 
						           TextWrapping="WrapWithOverflow" 
						           VerticalAlignment="Center"/>
					</Border>
					
				</Panel>
				
			</DockPanel>

			<!-- Logs time information -->
			<Border Classes="StatusBar" Background="{DynamicResource Brush/SessionView.LogHeader.Background}" BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,1,0,0" Grid.Row="4" IsVisible="{Binding HasLogsDuration}">
				<Grid ColumnDefinitions="*,Auto">

					<Grid.Styles>
						<Style Selector="Button.StatusBar_Button:pointerover /template/ ContentPresenter#PART_ContentPresenter">
							<Setter Property="TextBlock.Foreground" Value="{DynamicResource TextControlForeground}"/>
						</Style>
						<Style Selector="Button.StatusBar_Button:pressed /template/ ContentPresenter#PART_ContentPresenter">
							<Setter Property="TextBlock.Foreground" Value="{DynamicResource TextControlForeground}"/>
						</Style>
					</Grid.Styles>

					<!-- Logs -->
					<StackPanel ClipToBounds="True" Orientation="Horizontal">

						<!-- Icon -->
						<Image Classes="StatusBar_IconWithText" Source="{StaticResource Image/Calendar}"/>

						<!-- Starting point -->
						<Button Classes="StatusBar_Button" Command="{Binding LogSelection.SelectLogDurationStartingLogCommand}" Content="{Binding LogsDurationStartingString}" Foreground="{DynamicResource TextControlForeground}" ToolTip.Placement="Right" ToolTip.Tip="{asXaml:StringResource SessionView.LogsDurationStartingPoint}"/>

						<!-- Duration -->
						<Image Classes="StatusBar_Icon" Margin="{StaticResource Thickness/SessionView.LogsTimeInfoPanel.Arrow.Margin}" Source="{StaticResource Image/Icon.Forward}"/>
						<TextBlock Classes="StatusBar_TextBlock" Foreground="{DynamicResource TextControlForeground}" Text="{Binding LogsDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.LogsDuration}"/>
						<Image Classes="StatusBar_Icon" Margin="{StaticResource Thickness/SessionView.LogsTimeInfoPanel.Arrow.Margin}" Source="{StaticResource Image/Icon.Forward}"/>

						<!-- Ending point -->
						<Button Classes="StatusBar_Button" Command="{Binding LogSelection.SelectLogDurationEndingLogCommand}" Content="{Binding LogsDurationEndingString}" Foreground="{DynamicResource TextControlForeground}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.LogsDurationEndingPoint}"/>

					</StackPanel>

					<!-- Selected logs -->
					<StackPanel Grid.Column="1" IsVisible="{Binding LogSelection.SelectedLogsDuration, Converter={x:Static ObjectConverters.IsNotNull}}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" Arg1="{Binding LogSelection.SelectedLogsDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" Foreground="{DynamicResource TextControlForeground}" Format="{asXaml:StringResource SessionView.SelectedLogsDuration}"/>
					</StackPanel>
					
				</Grid>
			</Border>
			
			<!-- Shadows -->
			<Border BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Light}" Grid.RowSpan="5" IsHitTestVisible="False"/>

			<!-- Drag-and-drop receiver -->
			<Border Name="dragDropReceiverBorder" Background="{x:Static Brushes.Transparent}" Grid.RowSpan="3" IsVisible="False"/>

		</Grid>

		<!-- Status bar -->
		<Panel Grid.ColumnSpan="4" Grid.Row="2">
			<Border x:CompileBindings="False" Classes="StatusBar" Background="{Binding #root.StatusBarState, Converter={x:Static appControls:SessionView.StatusBarBackgroundConverter}}">
				
				<DockPanel>

					<!-- Right part -->
					<Grid DockPanel.Dock="Right">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/> <!-- [0] Analyzing progress -->
							<ColumnDefinition Width="Auto"/> <!-- [1] Saving logs -->
							<ColumnDefinition Width="Auto"/> <!-- [2] Waiting for data sources -->
							<ColumnDefinition Width="Auto"/> <!-- [3] URI -->
							<ColumnDefinition Width="Auto"/> <!-- [4] IP endpoint -->
							<ColumnDefinition Width="Auto"/> <!-- [5] Process ID -->
							<ColumnDefinition Width="Auto"/> <!-- [6] Process name -->
							<ColumnDefinition Width="Auto"/> <!-- [7] Working directory -->
							<ColumnDefinition Width="Auto"/> <!-- [8] High memory usage -->
							<ColumnDefinition Width="Auto"/> <!-- [9] Error message -->
							<ColumnDefinition Width="Auto"/> <!-- [10] Process info -->
						</Grid.ColumnDefinitions>

						<!-- Analyzing progress -->
						<StackPanel Grid.Column="0" 
						            IsVisible="{Binding LogAnalysis.IsAnalyzing}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<abControls:ProgressRing Classes="StatusBar_ProgressRingWithText"
							                         IsIndeterminate="True"/>
							<Panel VerticalAlignment="Center">
								<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
								                               Arg1="100.0%" 
								                               Format="{asXaml:StringResource SessionView.LogAnalysisProgress}" 
								                               Opacity="0"/>
								<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
								                               Arg1="{Binding LogAnalysis.AnalysisProgress, Converter={x:Static appViewModels:Session.LogsOperationProgressConverter}}" 
								                               Format="{asXaml:StringResource SessionView.LogAnalysisProgress}"/>
							</Panel>
						</StackPanel>

						<!-- Saving logs -->
						<StackPanel Grid.Column="1" 
						            IsVisible="{Binding IsSavingLogs}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<abControls:ProgressRing Classes="StatusBar_ProgressRingWithText"
							                         IsIndeterminate="True"/>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{asXaml:StringResource SessionView.SavingLogs}"/>
						</StackPanel>

						<!-- Waiting for data sources -->
						<StackPanel Grid.Column="2" 
						            IsVisible="{Binding IsWaitingForDataSources}"
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Waiting.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{asXaml:StringResource SessionView.WaitingForDataSources}"/>
						</StackPanel>

						<!-- URI -->
						<StackPanel Grid.Column="3" 
						            IsVisible="{Binding HasUri}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Uri.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{asXaml:MultiBinding 
							               {Binding Uri.Scheme}, 
							               {Binding Uri.Host},
							               {Binding Uri.Port}, 
							               StringFormat={}{0}://{1}:{2}
							           }"
							           ToolTip.Placement="Left" 
							           ToolTip.Tip="{Binding Uri}"/>
						</StackPanel>

						<!-- IP endpoint -->
						<StackPanel Grid.Column="4" 
						            IsVisible="{Binding HasIPEndPoint}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/IPAddress.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{Binding IPEndPoint}"/>
						</StackPanel>
						
						<!-- Process ID -->
						<StackPanel Grid.Column="5" 
						            IsVisible="{Binding ProcessId, Converter={x:Static ObjectConverters.IsNotNull}}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Process}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{Binding ProcessId}" 
							           ToolTip.Placement="Left" 
							           ToolTip.Tip="{asXaml:StringResource SessionView.ProcessId}"/>
						</StackPanel>
						
						<!-- Process name -->
						<StackPanel Grid.Column="6" 
						            IsVisible="{Binding ProcessName, Converter={x:Static StringConverters.IsNotNullOrEmpty}}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Process}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{Binding ProcessName}" 
							           ToolTip.Placement="Left"
							           ToolTip.Tip="{asXaml:StringResource SessionView.ProcessName}"/>
						</StackPanel>

						<!-- Working directory -->
						<StackPanel Grid.Column="7" 
						            IsVisible="{Binding HasWorkingDirectory}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<ToggleButton Name="workingDirectoryActionsButton" 
							              Classes="StatusBar_ToggleButton" 
							              Command="{Binding #root.ShowWorkingDirectoryActions}"
							              ToolTip.Placement="Left" ToolTip.Tip="{Binding WorkingDirectoryPath}">
								<StackPanel Orientation="Horizontal">
									<Image Classes="StatusBar_IconWithText">
										<DrawingImage>
											<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Folder.Outline}"/>
										</DrawingImage>
									</Image>
									<TextBlock Classes="StatusBar_TextBlock" 
									           Text="{Binding WorkingDirectoryName}"/>
									<Image Classes="StatusBar_DropDownIcon">
										<DrawingImage>
											<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.DropDown.Up}"/>
										</DrawingImage>
									</Image>
								</StackPanel>
							</ToggleButton>
						</StackPanel>
						
						<!-- High memory usage -->
						<StackPanel Grid.Column="8" 
						            IsVisible="{Binding IsHighMemoryUsageToStopReadingLogs}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Warning.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock"
							           Background="{x:Static Brushes.Transparent}" 
							           Text="{asXaml:StringResource SessionView.HighMemoryUsageToStopReadingLogs}" 
							           ToolTip.Tip="{asXaml:StringResource SessionView.HighMemoryUsageToStopReadingLogs.Description}"/>
						</StackPanel>

						<!-- Error message -->
						<StackPanel Grid.Column="9" 
						            IsVisible="{Binding HasAllDataSourceErrors}"
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Error.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" Text="{asXaml:StringResource SessionView.HasAllDataSourceErrors}"/>
						</StackPanel>
						<StackPanel Grid.Column="9" 
						            IsVisible="{Binding HasPartialDataSourceErrors}"
						            Orientation="Horizontal">
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Warning.Outline}"/>
								</DrawingImage>
							</Image>
							<TextBlock Classes="StatusBar_TextBlock" 
							           Text="{asXaml:StringResource SessionView.HasPartialDataSourceErrors}"/>
						</StackPanel>

						<!-- Process info -->
						<StackPanel Grid.Column="10" 
						            IsVisible="{Binding #root.IsProcessInfoVisible}" 
						            Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<StackPanel IsVisible="{Binding #root.Application.IsDebugMode, Mode=OneTime}" Orientation="Horizontal">
								<Image Classes="StatusBar_IconWithText">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Speed.Outline}"/>
									</DrawingImage>
								</Image>
								<Panel VerticalAlignment="Center">
									<TextBlock Classes="StatusBar_TextBlock" Text="000 ms   " Opacity="0" VerticalAlignment="Center"/>
									<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding #root.Application.ProcessInfo.UIResponseDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.UIResponseDuration}"/>
								</Panel>
							</StackPanel>
							<Image Classes="StatusBar_IconWithText">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Cpu}"/>
								</DrawingImage>
							</Image>
							<Panel VerticalAlignment="Center">
								<TextBlock Classes="StatusBar_TextBlock" Text="00.0 % " Opacity="0"/>
								<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" HorizontalAlignment="Left" Text="{Binding #root.Application.ProcessInfo.CpuUsagePercentage, StringFormat={}{0:F1} %}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.CpuUsage}"/>
							</Panel>
							<StackPanel Orientation="Horizontal">
								<Image Classes="StatusBar_IconWithText">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Memory.Outline}"/>
									</DrawingImage>
								</Image>
								<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" Text="{Binding LogsMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.LogsMemoryUsage}" VerticalAlignment="Center"/>
								<TextBlock Classes="StatusBar_TextBlock" Text="/" VerticalAlignment="Center"/>
								<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" Text="{Binding TotalLogsMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.TotalLogsMemoryUsage}" VerticalAlignment="Center"/>
								<TextBlock Classes="StatusBar_TextBlock" Text="/" VerticalAlignment="Center"/>
								<TextBlock Classes="StatusBar_TextBlock" Background="{x:Static Brushes.Transparent}" Text="{Binding #root.Application.ProcessInfo.PrivateMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.MemoryUsage}" VerticalAlignment="Center"/>
							</StackPanel>
							<Button Classes="StatusBar_Button" Command="{Binding #root.PerformGC}" IsVisible="{Binding #root.Application.IsDebugMode}" ToolTip.Placement="Left" ToolTip.Tip="{asXaml:StringResource SessionView.PerformGC}">
								<Image>
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{StaticResource Geometry/Icon.Broom}"/>
									</DrawingImage>
								</Image>
							</Button>
						</StackPanel>

					</Grid>

					<!-- Left part -->
					<Grid ClipToBounds="True" ColumnDefinitions="Auto,Auto,Auto,Auto">

						<!-- Empty view to reserve space -->
						<TextBlock Classes="StatusBar_TextBlock" 
						           Grid.ColumnSpan="5" 
						           Text="{asXaml:StringResource SessionView.AllLogCount}"
						           Opacity="0"/>

						<!-- Number of logs -->
						<StackPanel IsVisible="{Binding AllLogCount}" 
						            Opacity="0" 
						            Orientation="Horizontal">
							<!-- Empty view to reserve space -->
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="0000000" 
							                               Format="{asXaml:StringResource SessionView.AllLogCount}"
							                               VerticalAlignment="Center"/>
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="0000000" 
							                               Format="{asXaml:StringResource SessionView.FilteredLogCount}" 
							                               IsVisible="{Binding IsFilteringLogsNeeded}"
							                               VerticalAlignment="Center"/>
							<Separator Classes="StatusBar_Separator"/>
						</StackPanel>
						<StackPanel IsVisible="{Binding AllLogCount}"
						            Orientation="Horizontal">
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" Arg1="{Binding AllLogCount}" 
							                               Format="{asXaml:StringResource SessionView.AllLogCount}"
							                               VerticalAlignment="Center"/>
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="{Binding LogFiltering.FilteredLogs.Count}" 
							                               Format="{asXaml:StringResource SessionView.FilteredLogCount}" 
							                               IsVisible="{Binding LogFiltering.IsFilteringNeeded}" 
							                               VerticalAlignment="Center"/>
							<Separator Classes="StatusBar_Separator"/>
						</StackPanel>

						<!-- Last logs reading duration -->
						<StackPanel Grid.Column="1" 
						            IsVisible="{Binding HasLastLogsReadingDuration}" 
						            Orientation="Horizontal">
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="{Binding LastLogsReadingDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}"
							                               Format="{asXaml:StringResource SessionView.LastLogsReadingDuration}" 
							                               VerticalAlignment="Center"/>
							<Separator Classes="StatusBar_Separator"/>
						</StackPanel>

						<!-- Last logs filtering duration -->
						<StackPanel Grid.Column="2" 
						            IsVisible="{asXaml:AndBindings {Binding LogFiltering.IsFilteringNeeded}, {Binding LogFiltering.LastFilteringDuration, Converter={x:Static ObjectConverters.IsNotNull}}}"
						            Orientation="Horizontal">
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="{Binding LogFiltering.LastFilteringDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" 
							                               Format="{asXaml:StringResource SessionView.LastLogsFilteringDuration}" 
							                               VerticalAlignment="Center"/>
							<Separator Classes="StatusBar_Separator"/>
						</StackPanel>

						<!-- Selected logs -->
						<StackPanel Grid.Column="3" 
						            IsVisible="{Binding #logListBox.SelectedItems.Count, FallbackValue=False}" 
						            Orientation="Horizontal">
							<abControls:FormattedTextBlock Classes="StatusBar_TextBlock" 
							                               Arg1="{Binding LogSelection.SelectedLogs.Count}" 
							                               Format="{asXaml:StringResource SessionView.SelectedLogCount}" 
							                               VerticalAlignment="Center"/>
							<Separator Classes="StatusBar_Separator"/>
						</StackPanel>

					</Grid>
					
				</DockPanel>
			</Border>
			<Border BorderBrush="{DynamicResource Brush/StatusBar.Border}" BorderThickness="0,1,0,0"/>
		</Panel>

		<!-- Side panel tool bar -->
		<Border Classes="ToolBar" Background="{DynamicResource Brush/WorkingArea.Panel.Background}" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Border}" BorderThickness="1,0,0,0" Grid.Column="3" Grid.Row="1">
			<StackPanel Name="sidePanelBoolBarItemsPanel" VerticalAlignment="Top">

				<!-- Test -->
				<ToggleButton Name="testButton" Classes="ToolBar_ToggleButton" Command="{Binding #root.ShowTestMenu}" ToolTip.Tip="Test">
					<Panel>
						<Image Classes="Icon" Source="{StaticResource Image/Icon.Lab}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
						<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.Lab}"/>
							</DrawingImage>
						</Image>
					</Panel>
				</ToggleButton>

				<!-- Marked logs -->
				<ToggleButton Name="markedLogsPanelButton" Classes="ToolBar_ToggleButton" IsChecked="{Binding IsMarkedLogsPanelVisible, Mode=TwoWay}" ToolTip.Tip="{asXaml:StringResource SessionView.MarkedLogsPanel}">
					<Panel>
						<Image Classes="Icon" Source="{StaticResource Image/Marks.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
						<Image Classes="Icon" Source="{StaticResource Image/Marks.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
					</Panel>
				</ToggleButton>

				<!-- Timestamp categories -->
				<ToggleButton Name="timestampCategoriesPanelButton" Classes="ToolBar_ToggleButton" IsChecked="{Binding LogCategorizing.IsTimestampCategoriesPanelVisible, Mode=TwoWay}" ToolTip.Tip="{asXaml:StringResource SessionView.TimestampCategoriesPanel}">
					<Panel>
						<Image Classes="Icon" Source="{StaticResource Image/Calendar}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
						<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Calendar}"/>
							</DrawingImage>
						</Image>
					</Panel>
				</ToggleButton>

				<!-- Log analysis -->
				<ToggleButton Name="logAnalysisPanelButton" Classes="ToolBar_ToggleButton" IsChecked="{Binding LogAnalysis.IsPanelVisible, Mode=TwoWay}" IsVisible="False" ToolTip.Tip="{asXaml:StringResource SessionView.LogAnalysisPanel}">
					<Panel>
						<Image Classes="Icon" Source="{StaticResource Image/Icon.Analysis.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
						<Image Classes="Icon" Source="{StaticResource Image/Icon.Analysis.Outline.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
						<Border Classes="ToolBar_NotificationIndicator" IsVisible="{Binding LogAnalysis.HasNewAnalysisResultsInBackground}">
							<Image Classes="ToolBar_NotificationIndicator" Source="{StaticResource Image/Icon.NotificationIndicator.Information}"/>
						</Border>
					</Panel>
				</ToggleButton>

				<!-- Log files -->
				<ToggleButton Name="logFilesPanelButton" Classes="ToolBar_ToggleButton" IsChecked="{Binding IsLogFilesPanelVisible, Mode=TwoWay}" IsVisible="False" ToolTip.Tip="{asXaml:StringResource SessionView.LogFilesPanel}">
					<Panel>
						<Image Classes="Icon" Source="{StaticResource Image/Icon.File.Text.Outline}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
						<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}">
							<DrawingImage>
								<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.File.Text.Outline}"/>
							</DrawingImage>
						</Image>
					</Panel>
				</ToggleButton>

			</StackPanel>
		</Border>

		<!-- Side panel -->
		<Border Name="sidePanelContainer" 
		        Background="{DynamicResource Brush/WorkingArea.Panel.Background}" 
		        Grid.Column="2" 
		        Grid.Row="1" 
		        HorizontalAlignment="Stretch" 
		        IsEnabled="{Binding #root.HasProfile}"
		        IsVisible="{asXaml:OrBindings
		            {Binding LogAnalysis.IsPanelVisible},
		            {Binding IsLogFilesPanelVisible},
		            {Binding IsMarkedLogsPanelVisible},
		            {Binding LogCategorizing.IsTimestampCategoriesPanelVisible}
		        }">

			<Panel>

				<!-- Marked logs -->
				<Grid HorizontalAlignment="Stretch" IsVisible="{Binding IsMarkedLogsPanelVisible}" RowDefinitions="Auto,*" VerticalAlignment="Stretch">
					<Border Classes="SessionView_SidePanel_Header">
						<Grid ColumnDefinitions="Auto,*">
							<TextBlock Classes="SessionView_SidePanel_Header_Left" Text="{asXaml:StringResource SessionView.MarkedLogsPanel}"/>
							<TextBlock Classes="SessionView_SidePanel_Header_Right" Grid.Column="1" Text="{Binding MarkedLogs.Count, StringFormat={} ({0})}"/>
						</Grid>
					</Border>
					<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False"/>
					<asControls:ListBox Classes="Log" 
					                    Name="markedLogListBox" 
					                    Background="{x:Static Brushes.Transparent}" 
					                    BorderThickness="0" 
					                    Focusable="False" 
					                    Grid.Row="1" 
					                    DoubleClickOnItem="OnMarkedLogListBoxDoubleClickOnItem" 
					                    IsVisible="{Binding HasMarkedLogs}" 
					                    ItemsSource="{Binding MarkedLogs}" 
					                    SelectionChanged="OnMarkedLogListBoxSelectionChanged" 
					                    SelectionMode="Single"/>
					<TextBlock Classes="SessionView_SidePanel_FullPanelHint" 
					           Grid.Row="1"
					           IsVisible="{asXaml:AndBindings
					               {Binding !#markedLogListBox.ItemCount},
					               {Binding !IsShowingRawLogLinesTemporarily}
					           }"
					           Text="{asXaml:StringResource SessionView.MarkedLogsPanel.Hint}"/>
					<TextBlock Classes="SessionView_SidePanel_FullPanelHint" 
					           Grid.Row="1"
					           IsVisible="{Binding IsShowingRawLogLinesTemporarily}"
					           Text="{asXaml:StringResource SessionView.MarkedLogsPanel.Hint.ShowingRawLogLines}"/>
				</Grid>

				<!-- Timestamp categories -->
				<Grid HorizontalAlignment="Stretch" IsVisible="{Binding LogCategorizing.IsTimestampCategoriesPanelVisible}" RowDefinitions="Auto,*" VerticalAlignment="Stretch">
					<Border Classes="SessionView_SidePanel_Header">
						<Grid ColumnDefinitions="Auto,*">
							<TextBlock Classes="SessionView_SidePanel_Header_Left" Text="{asXaml:StringResource SessionView.TimestampCategoriesPanel}"/>
							<TextBlock Classes="SessionView_SidePanel_Header_Right" Grid.Column="1" Text="{Binding TimestampCategories.Count, StringFormat={} ({0})}"/>
						</Grid>
					</Border>
					<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False"/>
					<asControls:ListBox Classes="Log" 
					                    Name="timestampCategoryListBox" 
					                    Background="{x:Static Brushes.Transparent}" 
					                    BorderThickness="0" 
					                    Focusable="False" 
					                    Grid.Row="1" 
					                    ItemsSource="{Binding LogCategorizing.TimestampCategories}">
						<asControls:ListBox.ItemTemplate>
							<DataTemplate x:CompileBindings="True" x:DataType="appCategorizing:DisplayableLogCategory">
								<Grid ColumnDefinitions="Auto,*">
									<Border Background="{Binding Log.ColorIndicatorBrush, FallbackValue={x:Null}}" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Background}" BorderThickness="{StaticResource Thickness/SessionView.LogListBox.ColorIndicator.Border}" IsVisible="{ReflectionBinding #root.DataContext.HasLogColorIndicator, FallbackValue=False}" ToolTip.Tip="{Binding Log.ColorIndicatorTip}" Width="{StaticResource Double/SessionView.LogListBox.ColorIndicator.Width}"/>
									<TextBlock FontFamily="{Binding LogFontFamily, Source={x:Static appControls:ControlFonts.Default}}" FontSize="{Binding LogFontSize, Source={x:Static appControls:ControlFonts.Default}}" Grid.Column="1" Margin="{StaticResource Thickness/SessionView.MarkedLogListBox.Item.Padding}" Text="{Binding Name}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
								</Grid>
							</DataTemplate>
						</asControls:ListBox.ItemTemplate>
					</asControls:ListBox>
				</Grid>

				<!-- Log analysis -->
				<Grid HorizontalAlignment="Stretch" IsVisible="{Binding LogAnalysis.IsPanelVisible}" RowDefinitions="Auto,*,Auto" VerticalAlignment="Stretch">
					<Border Classes="SessionView_SidePanel_Header">
						<Grid ColumnDefinitions="Auto,*,Auto,Auto">
							<TextBlock Classes="SessionView_SidePanel_Header_Left" Text="{asXaml:StringResource SessionView.LogAnalysisPanel}"/>
							<TextBlock Classes="SessionView_SidePanel_Header_Right" Grid.Column="1" Text="{Binding LogAnalysis.AnalysisResults.Count, StringFormat={} ({0})}"/>
							<ToggleButton Classes="ToolBar_ToggleButton_Small" Grid.Column="2" IsChecked="{Binding #root.IsScrollingToLatestLogAnalysisResultNeeded, Mode=TwoWay}" ToolTip.Tip="{asXaml:StringResource SessionView.ScrollToLatestLogAnalysisResult}">
								<Panel>
									<Panel Name="scrollToBottomLogAnalysisResultIconPanel" IsVisible="{Binding LogProfile.SortDirection, Converter={x:Static abConverters:ObjectConverters.IsEquivalentTo}, ConverterParameter={x:Static app:SortDirection.Ascending}}">
										<Image Classes="Icon" Source="{StaticResource Image/ToBottom}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
										<Image Classes="Icon" Source="{StaticResource Image/ToBottom.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
									</Panel>
									<Panel IsVisible="{Binding !#scrollToBottomLogAnalysisResultIconPanel.IsVisible}">
										<Image Classes="Icon" Source="{StaticResource Image/ToTop}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
										<Image Classes="Icon" Source="{StaticResource Image/ToTop.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
									</Panel>
								</Panel>
							</ToggleButton>
							<ToggleButton Name="logAnalysisRuleSetsButton" Classes="ToolBar_ToggleButton_Small" Grid.Column="3" IsChecked="{Binding #logAnalysisRuleSetsPopup.IsOpen, Mode=TwoWay}" IsEnabled="{Binding !IsRemovingLogFiles}" ToolTip.Tip="{asXaml:StringResource SessionView.LogAnalysisRuleSets}">
								<Panel>
									<Panel IsVisible="{Binding !#activeLogAnalysisRuleSetsIconPanel.IsVisible}">
										<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Checklist.Outline}"/>
										<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Checklist.Outline.Light}"/>
									</Panel>
									<Panel Name="activeLogAnalysisRuleSetsIconPanel">
										<Panel.IsVisible>
											<MultiBinding Converter="{x:Static BoolConverters.Or}">
												<Binding Path="LogAnalysis.KeyLogAnalysisRuleSets.Count" Converter="{x:Static abConverters:NumberConverters.IsNonZero}"/>
												<Binding Path="LogAnalysis.OperationDurationAnalysisRuleSets.Count" Converter="{x:Static abConverters:NumberConverters.IsNonZero}"/>
												<Binding Path="LogAnalysis.OperationCountingAnalysisRuleSets.Count" Converter="{x:Static abConverters:NumberConverters.IsNonZero}"/>
												<Binding Path="LogAnalysis.LogAnalysisScriptSets.Count" Converter="{x:Static abConverters:NumberConverters.IsNonZero}"/>
												<MultiBinding Converter="{x:Static BoolConverters.And}">
													<Binding Path="LogAnalysis.HasCooperativeLogAnalysisScriptSet"/>
													<Binding Path="LogAnalysis.IsCooperativeLogAnalysisScriptSetEnabled"/>
													<Binding Path="IsScriptRunningEnabled" ElementName="root"/>
													<Binding Path="IsProVersionActivated"/>
												</MultiBinding>
											</MultiBinding>
										</Panel.IsVisible>
										<Image Classes="Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Checklist.Active}"/>
										<Image Classes="Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Checklist.Light}"/>
									</Panel>
								</Panel>
							</ToggleButton>
							<Popup Name="logAnalysisRuleSetsPopup" IsLightDismissEnabled="True" Placement="Bottom" PlacementTarget="{Binding #logAnalysisRuleSetsButton}" Width="{StaticResource Double/SessionView.LogAnalysisRuleSetsPopup.Width}" WindowManagerAddShadowHint="False">
								<Border Background="{DynamicResource ComboBoxDropDownBackground}" BorderBrush="{DynamicResource ComboBoxDropDownBorderBrush}" BorderThickness="{DynamicResource Thickness/SessionView.LogAnalysisRuleSetsPopup.Border}" CornerRadius="{DynamicResource OverlayCornerRadius}" Padding="{StaticResource Thickness/SessionView.LogAnalysisRuleSetsPopup.Padding}">
									<StackPanel>

										<!-- Cooperative log analysis script set -->
										<asControls:DialogItem ItemSize="Small">
											<StackPanel Classes="Dialog_Item_Text_Container">
												<TextBlock Classes="Dialog_TextBlock_Label" Text="{asXaml:StringResource SessionView.LogAnalysisRuleSets.CooperativeLogAnalysisScriptSet}"/>
												<Grid Classes="Dialog_IconText_Container_Description" 
												      ColumnDefinitions="Auto,*"
												      IsVisible="{asXaml:AndBindings {Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}, {Binding !#root.IsScriptRunningEnabled}}">
													<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
													<TextBlock Classes="Dialog_TextBlock_Description_Warning" Grid.Column="1" Text="{asXaml:StringResource SessionView.LogAnalysisRuleSets.Disabled}"/>
												</Grid>
												<Grid Classes="Dialog_IconText_Container_Description" 
												      ColumnDefinitions="Auto,*"
												      IsVisible="{asXaml:AndBindings {Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}, {Binding !IsProVersionActivated}, {Binding #root.IsScriptRunningEnabled}}">
													<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Warning.Outline.Colored}"/>
													<TextBlock Classes="Dialog_TextBlock_Description_Warning" Grid.Column="1" Text="{asXaml:StringResource SessionView.LogAnalysisRuleSets.ProVersionOnly}"/>
												</Grid>
											</StackPanel>
											<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" 
											              IsChecked="{Binding LogAnalysis.IsCooperativeLogAnalysisScriptSetEnabled}"
											              IsEnabled="{asXaml:AndBindings {Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}, {Binding #root.IsScriptRunningEnabled}, {Binding IsProVersionActivated}}"/>
										</asControls:DialogItem>
										<Line Classes="Dialog_Item_Separator_Inner"
										      IsVisible="{asXaml:OrBindings {Binding #enableRunningScriptButton.IsVisible}, {Binding #editCooperativeLogAnalysisScriptSetPanel.IsVisible}}"/>
										<StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
											<Button Classes="Dialog_Item_Button" Name="enableRunningScriptButton" 
											        Command="{Binding #root.EnableRunningScript}" 
											        Content="{asXaml:StringResource SessionView.EnableRunningScript}"
											        IsVisible="{asXaml:AndBindings {Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}, {Binding !#root.IsScriptRunningEnabled}}"/>
											<Separator Classes="Dialog_Separator_Small" 
											           IsVisible="{Binding #editCooperativeLogAnalysisScriptSetPanel.IsVisible}"/>
											<StackPanel Name="editCooperativeLogAnalysisScriptSetPanel" 
											            IsEnabled="{Binding IsProVersionActivated}" 
											            IsVisible="{asXaml:AndBindings {Binding HasLogProfile}, {Binding !IsBuiltInLogProfile}, {Binding #root.IsScriptRunningEnabled}}"
											            Orientation="Horizontal">
												
												<!-- Delete -->
												<Button Classes="Dialog_Item_Button" Command="{Binding #root.RemoveCooperativeLogAnalysisScript}" Content="{asXaml:StringResource LogProfileEditorDialog.CooperativeLogAnalysisScriptSet.Remove}" IsVisible="{Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}"/>
												<Separator Classes="Dialog_Separator_Small" IsVisible="{Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}"/>

												<!-- Import existing -->
												<ToggleButton Name="importExistingCooperativeLogAnalysisScriptSetButton" Classes="Dialog_Item_Button" Command="{Binding #root.ImportExistingCooperativeLogAnalysisScript}">
													<Grid ColumnDefinitions="*,Auto">
														<TextBlock Classes="Button_Text" Text="{asXaml:StringResource LogProfileEditorDialog.CooperativeLogAnalysisScriptSet.ImportExisting}"/>
														<Image Classes="Button_DropDownIcon" Grid.Column="1" IsVisible="{Binding !#importExistingCooperativeLogAnalysisScriptSetButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down}"/>
														<Image Classes="Button_DropDownIcon" Grid.Column="1" IsVisible="{Binding #importExistingCooperativeLogAnalysisScriptSetButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down.Light}"/>
													</Grid>
												</ToggleButton>
												<Separator Classes="Dialog_Separator_Small"/>

												<!-- Import from file -->
												<Button Classes="Dialog_Item_Button" Command="{Binding #root.ImportCooperativeLogAnalysisScriptFromFile}" Content="{asXaml:StringResource LogProfileEditorDialog.CooperativeLogAnalysisScriptSet.ImportFromFile}"/>
												<Separator Classes="Dialog_Separator_Small"/>
												
												<!-- Edit/Create -->
												<Button Classes="Dialog_Item_Button" Command="{Binding #root.CreateCooperativeLogAnalysisScriptSet}" Content="{asXaml:StringResource LogProfileEditorDialog.CooperativeLogAnalysisScriptSet.Create}" IsVisible="{Binding !LogAnalysis.HasCooperativeLogAnalysisScriptSet}"/>
												<Button Classes="Dialog_Item_Button" Command="{Binding #root.EditCooperativeLogAnalysisScriptSet}" Content="{asXaml:StringResource LogProfileEditorDialog.CooperativeLogAnalysisScriptSet.Edit}" IsVisible="{Binding LogAnalysis.HasCooperativeLogAnalysisScriptSet}"/>
												
											</StackPanel>
										</StackPanel>
										<Separator Classes="Dialog_Item_Separator"/>
										
										<!-- Rule sets and script sets -->
										<asControls:DialogItem ItemSize="Small">
											<TextBlock Classes="Dialog_TextBlock_Label" Text="{asXaml:StringResource SessionView.LogAnalysisRuleSetsPopup.Header}"/>
										</asControls:DialogItem>
										<Line Classes="Dialog_Item_Separator_Inner" IsVisible="{Binding #noLogAnalysisRuleSetsTextBlock.IsVisible}"/>
										<Grid RowDefinitions="Auto,Auto,Auto">
											<Panel MaxHeight="{StaticResource Double/SessionView.LogAnalysisRuleSetsPopup.MaxHeight}">
												<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
													<StackPanel>

														<StackPanel.Styles>
															<Style Selector="Expander">
																<Setter Property="HorizontalAlignment" Value="Stretch"/>
																<Setter Property="Margin" Value="{StaticResource Thickness/SessionView.LogAnalysisRuleSetsPopup.Group.Margin}"/>
																<Setter Property="Padding" Value="{StaticResource Thickness/SessionView.LogAnalysisRuleSetsPopup.Group.Padding}"/>
															</Style>
															<Style Selector="ListBox">
																<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
																<Setter Property="BorderThickness" Value="0"/>
																<Setter Property="Padding" Value="0"/>
															</Style>
															<Style Selector="ListBoxItem">
																<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
																<Setter Property="Padding" Value="{StaticResource Thickness/SessionView.LogAnalysisRuleSetListBox.Item.Padding}"/>
															</Style>
														</StackPanel.Styles>

														<!-- Key log analysis -->
														<Expander Name="keyLogAnalysisRuleSetsExpander" Background="{x:Null}" IsVisible="{Binding RuleSets.Count, Source={x:Static appAnalysis:KeyLogAnalysisRuleSetManager.Default}}">
															<Expander.Header>
																<Grid ColumnDefinitions="Auto,*">
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#keyLogAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Icon.Flag.Outline}"/>
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #keyLogAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=False}">
																		<DrawingImage>
																			<GeometryDrawing Brush="{DynamicResource Brush/Icon.Active}" Geometry="{StaticResource Geometry/Icon.Flag.Outline}"/>
																		</DrawingImage>
																	</Image>
																	<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.LogAnalysisRuleSets.KeyLogAnalysisRuleSet}" Arg2="{Binding #keyLogAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #keyLogAnalysisRuleSetListBox.ItemCount}" Format="{}{0} ({1}/{2})" Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
																</Grid>
															</Expander.Header>
															<ListBox Name="keyLogAnalysisRuleSetListBox" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding RuleSets, Source={x:Static appAnalysis:KeyLogAnalysisRuleSetManager.Default}}" SelectionMode="Multiple">
																<ListBox.ItemTemplate>
																	<DataTemplate x:CompileBindings="True" x:DataType="appAnalysis:KeyLogAnalysisRuleSet">
																		<Grid Name="itemRoot" ColumnDefinitions="Auto,*,Auto">
																			<Panel Height="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}" Margin="{StaticResource Thickness/SessionView.LogAnalysisRuleSetListBox.Icon.Margin}" VerticalAlignment="Center" Width="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}">
																				<Image Classes="Icon" 
																					IsVisible="{Binding $parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default},
																					    ConverterParameter=Light
																					}"/>
																				<Image Classes="Icon" 
																					IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default}
																					}"/>
																			</Panel>
																			<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																			<Border Grid.Column="1" Classes="InPlaceAction_Reserved"/>
																			<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.RemoveKeyLogAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Delete}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.ExportKeyLogAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Export}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Export}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.CopyKeyLogAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Copy}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.EditKeyLogAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Edit}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																			</StackPanel>
																		</Grid>
																	</DataTemplate>
																</ListBox.ItemTemplate>
															</ListBox>
														</Expander>

														<!-- Operation duration analysis -->
														<Expander Name="operationDurationAnalysisRuleSetsExpander" Background="{x:Null}" IsVisible="{Binding RuleSets.Count, Source={x:Static appCtxlBased:OperationDurationAnalysisRuleSetManager.Default}}">
															<Expander.Header>
																<Grid ColumnDefinitions="Auto,*">
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#operationDurationAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Timer.Outline}"/>
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #operationDurationAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=False}">
																		<DrawingImage>
																			<GeometryDrawing Brush="{DynamicResource Brush/Icon.Active}" Geometry="{StaticResource Geometry/Timer.Outline}"/>
																		</DrawingImage>
																	</Image>
																	<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.LogAnalysisRuleSets.OperationDurationAnalysisRuleSet}" Arg2="{Binding #operationDurationAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #operationDurationAnalysisRuleSetListBox.ItemCount}" Format="{}{0} ({1}/{2})" Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
																</Grid>
															</Expander.Header>
															<ListBox Name="operationDurationAnalysisRuleSetListBox" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding RuleSets, Source={x:Static appCtxlBased:OperationDurationAnalysisRuleSetManager.Default}}" SelectionMode="Multiple">
																<ListBox.ItemTemplate>
																	<DataTemplate x:CompileBindings="True" x:DataType="appCtxlBased:OperationDurationAnalysisRuleSet">
																		<Grid Name="itemRoot" ColumnDefinitions="Auto,*,Auto">
																			<Panel Height="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}" Margin="{StaticResource Thickness/SessionView.LogAnalysisRuleSetListBox.Icon.Margin}" VerticalAlignment="Center" Width="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}">
																				<Image Classes="Icon" 
																					IsVisible="{Binding $parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default},
																					    ConverterParameter=Light
																					}"/>
																				<Image Classes="Icon" 
																					IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default}
																					}"/>
																			</Panel>
																			<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																			<Border Grid.Column="1" Classes="InPlaceAction_Reserved"/>
																			<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.RemoveOperationDurationAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Delete}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.ExportOperationDurationAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Export}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Export}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.CopyOperationDurationAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Copy}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.EditOperationDurationAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Edit}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																			</StackPanel>
																		</Grid>
																	</DataTemplate>
																</ListBox.ItemTemplate>
															</ListBox>
														</Expander>

														<!-- Operation counting analysis -->
														<Expander Name="operationCountingAnalysisRuleSetsExpander" Background="{x:Null}" IsVisible="{Binding RuleSets.Count, Source={x:Static appAnalysis:OperationCountingAnalysisRuleSetManager.Default}}">
															<Expander.Header>
																<Grid ColumnDefinitions="Auto,*">
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#operationCountingAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Layers.Outline}"/>
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #operationCountingAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=False}">
																		<DrawingImage>
																			<GeometryDrawing Brush="{DynamicResource Brush/Icon.Active}" Geometry="{StaticResource Geometry/Layers.Outline}"/>
																		</DrawingImage>
																	</Image>
																	<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.LogAnalysisRuleSets.OperationCountingAnalysisRuleSet}" Arg2="{Binding #operationCountingAnalysisRuleSetListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #operationCountingAnalysisRuleSetListBox.ItemCount}" Format="{}{0} ({1}/{2})" Grid.Column="1" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
																</Grid>
															</Expander.Header>
															<ListBox Name="operationCountingAnalysisRuleSetListBox" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding RuleSets, Source={x:Static appAnalysis:OperationCountingAnalysisRuleSetManager.Default}}" SelectionMode="Multiple">
																<ListBox.ItemTemplate>
																	<DataTemplate x:CompileBindings="True" x:DataType="appAnalysis:OperationCountingAnalysisRuleSet">
																		<Grid Name="itemRoot" ColumnDefinitions="Auto,*,Auto">
																			<Panel Height="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}" Margin="{StaticResource Thickness/SessionView.LogAnalysisRuleSetListBox.Icon.Margin}" VerticalAlignment="Center" Width="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}">
																				<Image Classes="Icon" 
																					IsVisible="{Binding $parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default},
																					    ConverterParameter=Light
																					}"/>
																				<Image Classes="Icon" 
																					IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default}
																					}"/>
																			</Panel>
																			<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																			<Border Grid.Column="1" Classes="InPlaceAction_Reserved"/>
																			<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.RemoveOperationCountingAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Delete}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.ExportOperationCountingAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Export}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Export}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.CopyOperationCountingAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Copy}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.EditOperationCountingAnalysisRuleSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Edit}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																			</StackPanel>
																		</Grid>
																	</DataTemplate>
																</ListBox.ItemTemplate>
															</ListBox>
														</Expander>

														<!-- Log analysis script -->
														<Expander Name="logAnalysisScriptSetsExpander" Background="{x:Null}" IsVisible="{Binding ScriptSets.Count, Source={x:Static appAnalysisScripting:LogAnalysisScriptSetManager.Default}}">
															<Expander.Header>
																<Grid ColumnDefinitions="Auto,*">
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding !#logAnalysisScriptSetListBox.SelectedItems.Count, FallbackValue=True}" Source="{StaticResource Image/Code}"/>
																	<Image Classes="ListBoxItem_Icon" IsVisible="{Binding #logAnalysisScriptSetListBox.SelectedItems.Count, FallbackValue=False}">
																		<DrawingImage>
																			<GeometryDrawing Brush="{DynamicResource Brush/Icon.Active}" Geometry="{StaticResource Geometry/LogProfile.Code}"/>
																		</DrawingImage>
																	</Image>
																	<Panel Grid.Column="1" VerticalAlignment="Center">
																		<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.LogAnalysisRuleSets.LogAnalysisScriptSet}" Arg2="{Binding #logAnalysisScriptSetListBox.SelectedItems.Count, FallbackValue=0}" Arg3="{Binding #logAnalysisScriptSetListBox.ItemCount}" Format="{}{0} ({1}/{2})" IsVisible="{Binding #root.IsScriptRunningEnabled}" TextTrimming="CharacterEllipsis"/>
																		<abControls:FormattedTextBlock Arg1="{asXaml:StringResource SessionView.LogAnalysisRuleSets.LogAnalysisScriptSet}" Arg2="{asXaml:StringResource SessionView.LogAnalysisRuleSets.Disabled}" Format="{}{0} ({1})" IsVisible="{Binding !#root.IsScriptRunningEnabled}" TextTrimming="CharacterEllipsis"/>
																	</Panel>
																</Grid>
															</Expander.Header>
															<ListBox Name="logAnalysisScriptSetListBox" IsEnabled="{Binding #root.IsScriptRunningEnabled}" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding ScriptSets, Source={x:Static appAnalysisScripting:LogAnalysisScriptSetManager.Default}}" SelectionMode="Multiple">
																<ListBox.ItemTemplate>
																	<DataTemplate x:CompileBindings="True" x:DataType="appAnalysisScripting:LogAnalysisScriptSet">
																		<Grid Name="itemRoot" ColumnDefinitions="Auto,*,Auto">
																			<Panel Height="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}" Margin="{StaticResource Thickness/SessionView.LogAnalysisRuleSetListBox.Icon.Margin}" VerticalAlignment="Center" Width="{StaticResource Double/SessionView.LogAnalysisRuleSetListBox.Icon.Size}">
																				<Image Classes="Icon" 
																					IsVisible="{Binding $parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default},
																					    ConverterParameter=Light
																					}"/>
																				<Image Classes="Icon" 
																					IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"
																					Source="{asXaml:MultiBinding
																					    {Binding Icon},
																					    {Binding IconColor},
																					    Converter={x:Static appConverters:LogProfileIconConverter.Default}
																					}"/>
																			</Panel>
																			<TextBlock Grid.Column="1" Text="{Binding Name}" VerticalAlignment="Center"/>
																			<Border Grid.Column="1" Classes="InPlaceAction_Reserved"/>
																			<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal" VerticalAlignment="Center">
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.RemoveLogAnalysisScriptSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Delete}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.ExportLogAnalysisScriptSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Export}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Export}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.CopyLogAnalysisScriptSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Copy}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																				<Button Classes="InPlaceAction_Button" Command="{Binding #root.EditLogAnalysisScriptSetCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{asXaml:StringResource Common.Edit}">
																					<asControls:Image Classes="InPlaceAction_Icon">
																						<DrawingImage>
																							<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
																						</DrawingImage>
																					</asControls:Image>
																				</Button>
																			</StackPanel>
																		</Grid>
																	</DataTemplate>
																</ListBox.ItemTemplate>
															</ListBox>
														</Expander>
														
													</StackPanel>
												</ScrollViewer>
												<TextBlock Name="noLogAnalysisRuleSetsTextBlock" 
												           Foreground="{DynamicResource SystemControlForegroundBaseMediumBrush}" 
												           HorizontalAlignment="Center" 
												           IsVisible="{asXaml:AndBindings
												               {Binding RuleSets.Count, Source={x:Static appAnalysis:KeyLogAnalysisRuleSetManager.Default}, Converter={x:Static abConverters:NumberConverters.IsZero}},
												               {Binding RuleSets.Count, Source={x:Static appAnalysis:OperationCountingAnalysisRuleSetManager.Default}, Converter={x:Static abConverters:NumberConverters.IsZero}},
												               {Binding RuleSets.Count, Source={x:Static appCtxlBased:OperationDurationAnalysisRuleSetManager.Default}, Converter={x:Static abConverters:NumberConverters.IsZero}},
												               {Binding ScriptSets.Count, Source={x:Static appAnalysisScripting:LogAnalysisScriptSetManager.Default}, Converter={x:Static abConverters:NumberConverters.IsZero}}
												           }"
												           Margin="{StaticResource Thickness/SessionView.NoLogAnalysisRuleSetHint.Margin}" 
												           Text="{asXaml:StringResource Common.Empty}" 
												           TextWrapping="Wrap" 
												           VerticalAlignment="Center"/>
											</Panel>
											<Separator Classes="Dialog_Separator_Small" Grid.Row="1"/>
											<Grid ColumnDefinitions="Auto,*" Grid.Row="2">
												<StackPanel Orientation="Horizontal">
													<Button Classes="Dialog_Item_Button" 
													        Command="{Binding #root.OpenLogAnalysisDocumentation}" 
													        Content="{asXaml:StringResource Common.Help}"/>
													<Separator Classes="Dialog_Separator_Small"/>
												</StackPanel>
												<StackPanel Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
													<Button Classes="Dialog_Item_Button" 
													        Command="{Binding #root.ClearLogAnalysisRuleSetSelection}" 
													        Content="{asXaml:StringResource SessionView.ClearLogAnalysisRuleSetsSelection}"
													        IsEnabled="{asXaml:OrBindings
													            {Binding #keyLogAnalysisRuleSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsNonZero}, FallbackValue=False},
													            {Binding #operationDurationAnalysisRuleSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsNonZero}, FallbackValue=False},
													            {Binding #operationCountingAnalysisRuleSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsNonZero}, FallbackValue=False},
													            {Binding #logAnalysisScriptSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsNonZero}, FallbackValue=False}
													        }"/>
													<Separator Classes="Dialog_Separator_Small"/>
													<Button Classes="Dialog_Item_Button" 
													        Command="{Binding #root.ImportLogAnalysisRuleSet}" 
													        Content="{asXaml:StringResource Common.Import.WithDialog}"/>
													<Separator Classes="Dialog_Separator_Small"/>
													<ToggleButton Name="createLogAnalysisRuleSetButton" 
													              Classes="Dialog_Item_ToggleButton" 
													              Command="{Binding #root.CreateLogAnalysisRuleSet}">
														<Grid ColumnDefinitions="*,Auto">
															<TextBlock Classes="Button_TextBlock" Text="{asXaml:StringResource Common.Create}"/>
															<Panel Grid.Column="1">
																<Image Classes="Button_DropDownIcon" IsVisible="{Binding !#createLogAnalysisRuleSetButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down}"/>
																<Image Classes="Button_DropDownIcon" IsVisible="{Binding #createLogAnalysisRuleSetButton.IsChecked}" Source="{StaticResource Image/Icon.DropDown.Down.Light}"/>
															</Panel>
														</Grid>
													</ToggleButton>
												</StackPanel>
											</Grid>
										</Grid>
									</StackPanel>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False"/>
					<asControls:ListBox Classes="Log" 
					                    Name="logAnalysisResultListBox" 
					                    AutoScrollToSelectedItem="False"
					                    Background="{x:Static Brushes.Transparent}" 
					                    BorderThickness="0" 
					                    Focusable="False" 
					                    Grid.Row="1" 
					                    SelectionMode="Multiple" 
					                    SelectedItems="{Binding LogAnalysis.SelectedAnalysisResults}">
						<asControls:ListBox.ContextMenu>
							<ContextMenu>
								<MenuItem Command="{Binding LogAnalysis.CopySelectedAnalysisResultsCommand}" Header="{asXaml:StringResource Common.Copy}">
									<MenuItem.Icon>
										<Image Classes="MenuItem_Icon" Source="{StaticResource Image/Icon.Copy.Outline}"/>
									</MenuItem.Icon>
								</MenuItem>
							</ContextMenu>
						</asControls:ListBox.ContextMenu>
						<asControls:ListBox.ItemTemplate>
							<DataTemplate x:CompileBindings="True" x:DataType="appAnalysis:DisplayableLogAnalysisResult">
								<Grid ColumnDefinitions="Auto,*" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
									
									<!-- Color indicator -->
									<Border x:CompileBindings="False" 
									        Background="{Binding ColorIndicatorBrush}" 
									        BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Background}" 
									        BorderThickness="{StaticResource Thickness/SessionView.LogListBox.ColorIndicator.Border}" 
									        IsVisible="{Binding #root.DataContext.HasLogColorIndicator, FallbackValue=False}" 
									        ToolTip.Tip="{Binding Log.ColorIndicatorTip, FallbackValue={x:Null}}" 
									        VerticalAlignment="Stretch"
									        Width="{StaticResource Double/SessionView.LogListBox.ColorIndicator.Width}"/>
									
									<!-- Content -->
									<Grid ColumnDefinitions="Auto,*"
									      Grid.Column="1"
									      Margin="{DynamicResource Thickness/SessionView.LogAnalysisResult.Padding}"
									      RowDefinitions="Auto,*" 
									      VerticalAlignment="Center">
										
										<!-- Message -->
										<abControls:TextBlock Name="messageTextBlock"
										                      Background="{x:Static Brushes.Transparent}"
										                      FontFamily="{Binding LogFontFamily, Source={x:Static appControls:ControlFonts.Default}}" 
										                      FontSize="{Binding LogFontSize, Source={x:Static appControls:ControlFonts.Default}}"
										                      Grid.Column="1" 
										                      MaxLines="5"
										                      Padding="{StaticResource Thickness/SessionView.LogAnalysisResult.Message.Margin}" 
										                      Text="{Binding Message}" 
										                      TextTrimming="CharacterEllipsis" 
										                      TextWrapping="NoWrap"
										                      VerticalAlignment="Center">
											<abControls:TextBlock.Resources>
												<StaticResourceExtension x:Key="ToolTipContentMaxWidth" ResourceKey="Double/SessionView.LogAnalysisResult.ToolTip.MaxWidth"/>
											</abControls:TextBlock.Resources>
											<abControls:TextBlock.ToolTipTemplate>
												<DataTemplate x:CompileBindings="False">
													<TextBlock FontFamily="{Binding $parent[TextBlock].FontFamily}" 
													           Text="{Binding}" 
													           TextTrimming="CharacterEllipsis"
													           TextWrapping="Wrap" />
												</DataTemplate>
											</abControls:TextBlock.ToolTipTemplate>
										</abControls:TextBlock>
										
										<!-- Icon -->
										<Image x:CompileBindings="False" 
										       Classes="Icon"
										       Height="{StaticResource Double/SessionView.LogAnalysisResult.Icon.Size}" 
										       Margin="{StaticResource Thickness/SessionView.LogAnalysisResult.Icon.Margin}"
										       Source="{asXaml:MultiBinding
										           {Binding Type, FallbackValue={x:Static appAnalysis:DisplayableLogAnalysisResultType.Debug}},
										           {Binding IsPointerOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, FallbackValue=False},
										           {Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, FallbackValue=False},
										           Converter={x:Static appControls:SessionView.LogAnalysisResultIconConverter}
										       }"
										       Width="{StaticResource Double/SessionView.LogAnalysisResult.Icon.Size}"
										       VerticalAlignment="Top"/>
										
										<!-- Sub information -->
										<Grid ColumnDefinitions="Auto,*"
										      Grid.Column="1" 
										      Grid.Row="1" 
										      HorizontalAlignment="Stretch"
										      IsVisible="{asXaml:OrBindings {Binding HasByteSize}, {Binding HasDuration}, {Binding HasQuantity}}"
										      Margin="{StaticResource Thickness/SessionView.LogAnalysisResult.SubInfoPanel.Padding}"
										      RowDefinitions="Auto,Auto,Auto"
										      VerticalAlignment="Top">
											
											<!-- Duration -->
											<asControls:Image Name="durationIcon"
											                  Classes="Icon" 
											                  Height="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}" 
											                  IsVisible="{Binding HasDuration}" 
											                  Margin="{StaticResource Thickness/SessionView.LogAnalysisResult.SubInfo.Icon.Margin}"
											                  VerticalAlignment="Center" 
											                  Width="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}">
												<DrawingImage>
													<GeometryDrawing Brush="{ReflectionBinding #durationIcon.(TextElement.Foreground)}" 
													                 Geometry="{StaticResource Geometry/Timer.Outline}"/>
												</DrawingImage>
											</asControls:Image>
											<TextBlock Background="{x:Static Brushes.Transparent}" 
											           FontSize="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.FontSize}" 
											           Grid.Column="1"
											           IsVisible="{Binding HasDuration}" 
											           Padding="{DynamicResource Thickness/SessionView.LogAnalysisResult.SubInfo.Text.Margin}"
											           Text="{Binding Duration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" 
											           TextTrimming="CharacterEllipsis" 
											           ToolTip.Tip="{asXaml:StringResource SessionView.LogAnalysisResult.Duration}"
											           VerticalAlignment="Center"/>
											
											<!-- ByteSize -->
											<asControls:Image Name="byteSizeIcon"
											                  Classes="Icon" 
											                  Grid.Row="1" 
											                  Height="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}" 
											                  IsVisible="{Binding HasByteSize}" 
											                  Margin="{StaticResource Thickness/SessionView.LogAnalysisResult.SubInfo.Icon.Margin}"
											                  VerticalAlignment="Center" 
											                  Width="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}">
												<DrawingImage>
													<GeometryDrawing Brush="{ReflectionBinding #byteSizeIcon.(TextElement.Foreground)}" 
													                 Geometry="{DynamicResource Geometry/Icon.Memory.Outline}"/>
												</DrawingImage>
											</asControls:Image>
											<abControls:FormattedTextBlock Background="{x:Static Brushes.Transparent}"
											                               FontSize="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.FontSize}" 
											                               Arg1="{Binding ByteSize, StringFormat={}{0:n0}}"
											                               Arg2="{Binding ByteSize, Converter={x:Static asConverters:FileSizeConverter.Default}}"
											                               Grid.Column="1"
											                               Grid.Row="1"
											                               Format="{}{0} ({1})"
											                               IsVisible="{Binding HasByteSize}" 
											                               Padding="{DynamicResource Thickness/SessionView.LogAnalysisResult.SubInfo.Text.Margin}"
											                               TextTrimming="CharacterEllipsis" 
											                               ToolTip.Tip="{asXaml:StringResource SessionView.LogAnalysisResult.ByteSize}"
											                               VerticalAlignment="Center"/>
											
											<!-- Quantity -->
											<asControls:Image Name="quantityIcon"
											                  Classes="Icon" 
											                  Grid.Row="2" 
											                  Height="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}" 
											                  IsVisible="{Binding HasQuantity}" 
											                  Margin="{StaticResource Thickness/SessionView.LogAnalysisResult.SubInfo.Icon.Margin}"
											                  VerticalAlignment="Center" 
											                  Width="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.Icon.Size}">
												<DrawingImage>
													<GeometryDrawing Brush="{ReflectionBinding #quantityIcon.(TextElement.Foreground)}" 
													                 Geometry="{StaticResource Geometry/Layers.Outline}"/>
												</DrawingImage>
											</asControls:Image>
											<TextBlock Background="{x:Static Brushes.Transparent}"
											           FontSize="{StaticResource Double/SessionView.LogAnalysisResult.SubInfo.FontSize}" 
											           Grid.Column="1"
											           Grid.Row="2"
											           IsVisible="{Binding HasQuantity}" 
											           Padding="{DynamicResource Thickness/SessionView.LogAnalysisResult.SubInfo.Text.Margin}"
											           Text="{Binding Quantity}" 
											           TextTrimming="CharacterEllipsis" 
											           ToolTip.Tip="{asXaml:StringResource SessionView.LogAnalysisResult.Quantity}"
											           VerticalAlignment="Center"/>
											
										</Grid>
									</Grid>
								</Grid>
							</DataTemplate>
						</asControls:ListBox.ItemTemplate>
					</asControls:ListBox>
					<TextBlock Classes="SessionView_SidePanel_FullPanelHint" 
					           Grid.Row="1"
					           IsVisible="{asXaml:AndBindings
					               {Binding !IsRemovingLogFiles},
					               {Binding LogAnalysis.AnalysisResults.Count, Converter={x:Static abConverters:NumberConverters.IsZero}},
					               {Binding #keyLogAnalysisRuleSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsZero}, FallbackValue=False},
					               {Binding #operationDurationAnalysisRuleSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsZero}, FallbackValue=False},
					               {Binding #logAnalysisScriptSetListBox.SelectedItems.Count, Converter={x:Static abConverters:NumberConverters.IsZero}, FallbackValue=False}
					           }"
					           Text="{asXaml:StringResource SessionView.LogAnalysisPanel.Hint}"/>
					<TextBlock Classes="SessionView_SidePanel_FullPanelHint"
					           Grid.Row="1"
					           IsVisible="{Binding IsRemovingLogFiles}"
					           Text="{asXaml:StringResource SessionView.LogAnalysisPanel.DisabledWhenRemovingLogFiles}"/>
					<Border Background="{DynamicResource Brush/SessionView.LogHeader.Background}" 
					        Classes="StatusBar" 
					        Grid.Row="2" 
					        IsVisible="{asXaml:OrBindings
					            {Binding #selectedLogAnalysisResultsDurationPanel.IsVisible},
					            {Binding #selectedLogAnalysisResultsByteSizePanel.IsVisible},
					            {Binding #selectedLogAnalysisResultsQuantityPanel.IsVisible}
					        }"
					        Padding="{StaticResource Thickness/StatusBar.Item.Margin}">
						<StackPanel TextBlock.Foreground="{DynamicResource TextControlForeground}" VerticalAlignment="Center">

							<!-- Duration -->
							<Grid Name="selectedLogAnalysisResultsDurationPanel" ColumnDefinitions="Auto,Auto,Auto,*" IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsTotalDuration, Converter={x:Static ObjectConverters.IsNotNull}}">
								<Image 
									Classes="StatusBar_IconWithText" 
									Source="{StaticResource Image/Timer.Outline}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="1" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsTotalDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsTotalDuration}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="2" 
									IsVisible="{Binding #selectedLogAnalysisResultsAvgDuration.IsVisible}" 
									Margin="0" 
									Text=" / "/>
								<TextBlock Name="selectedLogAnalysisResultsAvgDuration" 
									Classes="StatusBar_TextBlock" 
									Grid.Column="3" 
									IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsAverageDuration, Converter={x:Static ObjectConverters.IsNotNull}}" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsAverageDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsAverageDuration}"/>
							</Grid>

							<!-- ByteSize -->
							<Grid Name="selectedLogAnalysisResultsByteSizePanel" ColumnDefinitions="Auto,Auto,Auto,*" IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsTotalByteSize, Converter={x:Static ObjectConverters.IsNotNull}}">
								<Image 
									Classes="StatusBar_IconWithText" 
									Source="{StaticResource Image/Icon.Memory.Outline}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="1" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsTotalByteSize, Converter={x:Static asConverters:FileSizeConverter.Default}}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsTotalByteSize}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="2" 
									IsVisible="{Binding #selectedLogAnalysisResultsAvgByteSize.IsVisible}" 
									Margin="0" 
									Text=" / "/>
								<TextBlock Name="selectedLogAnalysisResultsAvgByteSize" 
									Classes="StatusBar_TextBlock" 
									Grid.Column="3" 
									IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsAverageByteSize, Converter={x:Static ObjectConverters.IsNotNull}}" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsAverageByteSize, Converter={x:Static asConverters:FileSizeConverter.Default}}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsAverageByteSize}"/>
							</Grid>

							<!-- Quantity -->
							<Grid Name="selectedLogAnalysisResultsQuantityPanel" ColumnDefinitions="Auto,Auto,Auto,*" IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsTotalQuantity, Converter={x:Static ObjectConverters.IsNotNull}}">
								<Image 
									Classes="StatusBar_IconWithText" 
									Source="{StaticResource Image/Layers.Outline}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="1" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsTotalQuantity}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsTotalQuantity}"/>
								<TextBlock 
									Classes="StatusBar_TextBlock" 
									Grid.Column="2" 
									IsVisible="{Binding #selectedLogAnalysisResultsAvgQuantity.IsVisible}" 
									Margin="0" 
									Text=" / "/>
								<TextBlock Name="selectedLogAnalysisResultsAvgQuantity" 
									Classes="StatusBar_TextBlock" 
									Grid.Column="3" 
									IsVisible="{Binding LogAnalysis.SelectedAnalysisResultsAverageQuantity, Converter={x:Static ObjectConverters.IsNotNull}}" 
									Margin="0" 
									Text="{Binding LogAnalysis.SelectedAnalysisResultsAverageQuantity, StringFormat={}{0:F2}}" 
									ToolTip.Placement="Left"
									ToolTip.Tip="{asXaml:StringResource SessionView.SelectedLogAnalysisResultsAverageQuantity}"/>
							</Grid>

						</StackPanel>
					</Border>
				</Grid>

				<!-- Log files -->
				<Grid HorizontalAlignment="Stretch" IsVisible="{Binding IsLogFilesPanelVisible}" RowDefinitions="Auto,*" VerticalAlignment="Stretch">
					<Border Classes="SessionView_SidePanel_Header">
						<Grid ColumnDefinitions="Auto,*">
							<TextBlock Classes="SessionView_SidePanel_Header_Left" Text="{asXaml:StringResource SessionView.LogFilesPanel}"/>
							<TextBlock Classes="SessionView_SidePanel_Header_Right" Grid.Column="1" Text="{Binding LogFiles.Count, StringFormat={} ({0})}"/>
						</Grid>
					</Border>
					<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False"/>
					<asControls:ListBox Classes="Log" Name="logFileListBox" Background="{x:Static Brushes.Transparent}" BorderThickness="0" ContextMenu="{StaticResource logFileActionMenu}" Focusable="False" Grid.Row="1" IsEnabled="{Binding IsProVersionActivated}" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding LogFiles}">
						<asControls:ListBox.ItemTemplate>
							<DataTemplate>
								<DockPanel>
									<Border Background="{Binding ColorIndicatorBrush}" BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Background}" BorderThickness="{StaticResource Thickness/SessionView.LogListBox.ColorIndicator.Border}" DockPanel.Dock="Left" IsVisible="{Binding #root.DataContext.HasLogColorIndicatorByFileName, FallbackValue=False}" Width="{StaticResource Double/SessionView.LogListBox.ColorIndicator.Width}"/>
									<Grid ColumnDefinitions="Auto,*,Auto" Margin="{StaticResource Thickness/SessionView.LogFileListBox.Item.Padding}">
										<Panel Grid.Column="0" Height="{StaticResource Double/SessionView.LogFileInfo.Icon.Size}" Margin="{StaticResource Thickness/SessionView.LogFileInfo.Icon.Margin}" VerticalAlignment="Top" Width="{StaticResource Double/SessionView.LogFileInfo.Icon.Size}">
											<Panel IsVisible="{Binding !#lightLogFileIconsContainer.IsVisible}">
												<Image Classes="Icon" IsVisible="{Binding IsLogsReadingCompleted}" Source="{StaticResource Image/Icon.File.Text.Outline}"/>
												<Image Classes="Icon" IsVisible="{Binding IsReadingLogs}" Source="{StaticResource Image/Icon.Waiting.Outline}"/>
												<Image Classes="Icon" IsVisible="{Binding IsRemoving}" Source="{StaticResource Image/Icon.Delete.Outline}"/>
												<Image Classes="Icon" IsVisible="{Binding HasError}" Source="{StaticResource Image/Icon.Error.Outline}"/>
											</Panel>
											<Panel Name="lightLogFileIconsContainer"
											       IsVisible="{asXaml:AndBindings {Binding IsPointerOver, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}, {Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}}">
												<Image Classes="Icon" IsVisible="{Binding IsLogsReadingCompleted}">
													<DrawingImage>
														<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.File.Text.Outline}"/>
													</DrawingImage>
												</Image>
												<Image Classes="Icon" IsVisible="{Binding IsReadingLogs}">
													<DrawingImage>
														<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.Waiting.Outline}"/>
													</DrawingImage>
												</Image>
												<Image Classes="Icon" IsVisible="{Binding IsRemoving}">
													<DrawingImage>
														<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
													</DrawingImage>
												</Image>
												<Image Classes="Icon" IsVisible="{Binding HasError}">
													<DrawingImage>
														<GeometryDrawing Brush="{DynamicResource Brush/Icon.Light}" Geometry="{StaticResource Geometry/Icon.Error.Outline}"/>
													</DrawingImage>
												</Image>
											</Panel>
										</Panel>
										<StackPanel Grid.Column="1">
											<TextBlock Background="{x:Static Brushes.Transparent}" FontSize="{StaticResource Double/SessionView.LogFileInfo.FileName.FontSize}" FontWeight="Bold" Margin="{StaticResource Thickness/SessionView.LogFileInfo.FileName.Margin}" Text="{Binding FileName, Converter={x:Static abConverters:FilePathConverters.FileName}}" TextTrimming="CharacterEllipsis" ToolTip.Tip="{Binding FileName}"/>
											<abControls:FormattedTextBlock Arg1="{Binding LogCount}" Format="{asXaml:StringResource SessionView.LogCountInLogFile}" Margin="{StaticResource Thickness/SessionView.LogFileInfo.Summary.Margin}" TextTrimming="CharacterEllipsis"/>
										</StackPanel>
										<StackPanel Grid.Column="2" HorizontalAlignment="Right" Orientation="Horizontal" VerticalAlignment="Bottom">
											<Border Background="{x:Static Brushes.Transparent}" IsVisible="{Binding !LogReadingPrecondition.IsEmpty}" ToolTip.Tip="{asXaml:StringResource SessionView.HasLogReadingPrecondition}">
												<Image Classes="Icon" Height="{StaticResource Double/SessionView.LogFileInfo.Indicator.Size}" Margin="{StaticResource Thickness/SessionView.LogFileInfo.Indicator.Margin}" Source="{StaticResource Image/Filter}" Width="{StaticResource Double/SessionView.LogFileInfo.Indicator.Size}"/>
											</Border>
											<Border Background="{x:Static Brushes.Transparent}" IsVisible="{Binding MaxLogReadingCount, Converter={x:Static ObjectConverters.IsNotNull}}" ToolTip.Tip="{asXaml:StringResource SessionView.HasMaxLogReadingCount}">
												<Image Classes="Icon" Height="{StaticResource Double/SessionView.LogFileInfo.Indicator.Size}" Margin="{StaticResource Thickness/SessionView.LogFileInfo.Indicator.Margin}" Source="{StaticResource Image/Layers}" Width="{StaticResource Double/SessionView.LogFileInfo.Indicator.Size}"/>
											</Border>
										</StackPanel>
									</Grid>
								</DockPanel>
							</DataTemplate>
						</asControls:ListBox.ItemTemplate>
					</asControls:ListBox>
					<TextBlock Classes="SessionView_SidePanel_FullPanelHint" 
					           Grid.Row="1"
					           IsVisible="{asXaml:AndBindings 
					               {Binding IsProVersionActivated}, 
					               {Binding !IsLogFileSupported}
					           }"
					           Text="{asXaml:StringResource SessionView.LogFileIsUnsupported}"/>
					<Border Background="{StaticResource Brush/SessionView.SidePanel.FullPanelHint.Background}" 
					        Grid.Row="1" 
					        IsVisible="{Binding !IsProVersionActivated}">
						<TextBlock Classes="SessionView_SidePanel_FullPanelHint"
						           Text="{asXaml:StringResource SessionView.ProVersionNeeded}"/>
					</Border>
				</Grid>

			</Panel>

		</Border>
		<Panel Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" IsHitTestVisible="False" IsVisible="{Binding #sidePanelContainer.IsVisible}" VerticalAlignment="Stretch">
			<Panel VerticalAlignment="Top">
				<Border Classes="SessionView_SidePanel_Header" Padding="{StaticResource Thickness/SessionView.SidePanel.Header.Padding.Dummy}">
					<TextBlock Classes="SessionView_SidePanel_Header_Left" Margin="{StaticResource Thickness/SessionView.SidePanel.Header.Text.Left.Margin.Dummy}"/>
				</Border>
				<Border BorderBrush="{DynamicResource Brush/SessionView.LogHeader.Border}" BorderThickness="0,0,0,1" IsHitTestVisible="False" Margin="1,0,0,0"/>
			</Panel>
			<Border BorderBrush="{DynamicResource Brush/WorkingArea.Panel.Border}" BorderThickness="1,0,0,0" IsHitTestVisible="False"/>
		</Panel>
		<GridSplitter Background="{x:Static Brushes.Transparent}" Classes="GridSplitter_Vertical" Grid.Column="1" Grid.Row="1" IsVisible="{Binding #sidePanelContainer.IsVisible}"/>

	</Grid>
	
</UserControl>
