<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
        xmlns:app="using:CarinaStudio.ULogViewer"
        xmlns:appControls="using:CarinaStudio.ULogViewer.Controls"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.ULogViewer.Controls.RegexEditorDialog"
        Classes="Dialog"
		Name="window"
        Title="{DynamicResource String/RegexEditorDialog.Title}"
        Width="{DynamicResource Double/RegexEditorDialog.Width}">
	
	<!-- Content -->
	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel">
			<StackPanel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.GenerateResultCommand}" Content="{Binding #window.OKButtonText}"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.Close}" Content="{Binding #window.CancelButtonText}"/>
			</StackPanel>
		</Border>

		<!-- Content -->
		<ScrollViewer MaxHeight="{StaticResource Double/RegexEditorDialog.Content.MaxHeight}">
			<StackPanel Classes="Dialog_ContentPanel_WithItemsGroups">

				<!-- Regex -->
				<Border Classes="Dialog_ItemsGroup_Container">
					<StackPanel>

						<!-- Regex -->
						<asControls:DialogItem>
							<StackPanel Classes="Dialog_Item_Text_Container">
								<WrapPanel>
									<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/RegexEditorDialog.Regex}"/>
									<Button Classes="Dialog_Info_Button" Command="{x:Static app:Utility.OpenLinkCommand}" CommandParameter="{x:Static app:Uris.RegexReference}" ToolTip.Tip="{DynamicResource String/Common.RegularExpression.Reference}">
										<Image Classes="Icon" Source="{DynamicResource Image/Icon.Question.Outline}"/>
									</Button>
								</WrapPanel>
								<TextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding #regexTextBox.IsTextValid}" Text="{DynamicResource String/RegexEditorDialog.Regex.Description}"/>
								<Grid Classes="Dialog_IconText_Container_Description" ColumnDefinitions="Auto,*" IsVisible="{Binding !#regexTextBox.IsTextValid}">
									<Image Classes="Dialog_Icon_Description" Source="{StaticResource Image/Icon.Error.Outline.Colored}"/>
									<TextBlock Classes="Dialog_TextBlock_Description_Error" Grid.Column="1" Text="{DynamicResource String/Common.InvalidFormat}"/>
								</Grid>
							</StackPanel>
						</asControls:DialogItem>
						<Line Classes="Dialog_Item_Separator_Inner"/>
						<asControls:RegexTextBox Name="regexTextBox" Classes="Dialog_Item_TextBox" Background="{x:Static Brushes.Transparent}" BorderBrush="{x:Static Brushes.Transparent}" FontFamily="{Binding PatternFontFamily, Source={x:Static appControls:ControlFonts.Default}}" Height="{DynamicResource Double/RegexEditorDialog.RegexInput.Height}" IgnoreCase="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" TextAlignment="Left" TextWrapping="Wrap" Watermark="{DynamicResource String/Common.Required}"/>
						<Line Classes="Dialog_Item_Separator_Inner" IsVisible="{Binding #window.IsCapturingGroupsEnabled}"/>
						<Panel IsVisible="{Binding #window.IsCapturingGroupsEnabled}">
							<SelectableTextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding !#window.IsCapturingLogPropertiesEnabled}" Text="{DynamicResource String/RegexEditorDialog.Regex.Description.CapturingGroups}"/>
							<SelectableTextBlock Classes="Dialog_TextBlock_Description" IsVisible="{Binding #window.IsCapturingLogPropertiesEnabled}" Text="{DynamicResource String/RegexEditorDialog.Regex.Description.CapturingLogProperties}"/>
						</Panel>
						<Separator Classes="Dialog_Item_Separator"/>

						<!-- Ignore case -->
						<asControls:DialogItem>
							<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/RegexEditorDialog.IgnoreCase}"/>
							<ToggleSwitch Classes="Dialog_Item_ToggleSwitch" IsChecked="{Binding #regexTextBox.IgnoreCase, Mode=TwoWay}"/>
						</asControls:DialogItem>
					
					</StackPanel>
				</Border>
				<Separator Classes="Dialog_Separator"/>

				<!-- Test -->
				<Border Classes="Dialog_ItemsGroup_Container">
					<StackPanel>

						<!-- Test log line -->
						<asControls:DialogItem>
							<StackPanel Classes="Dialog_Item_Text_Container">
								<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/RegexEditorDialog.TestLogLine}"/>
								<TextBlock Name="testLogLineDescriptionTextBlock" Classes="Dialog_TextBlock_Description"/>
							</StackPanel>
						</asControls:DialogItem>
						<Line Classes="Dialog_Item_Separator_Inner"/>
						<TextBox Name="testLogLineTextBox" Classes="Dialog_Item_TextBox" Background="{x:Static Brushes.Transparent}" BorderBrush="{x:Static Brushes.Transparent}" Height="{DynamicResource Double/RegexEditorDialog.TestLogLine.Height}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Text="{Binding #window.TestLogLine, Mode=TwoWay}" TextAlignment="Left" TextWrapping="Wrap" Watermark="{DynamicResource String/Common.None}"/>
						<Separator Classes="Dialog_Item_Separator"/>

						<!-- Test result -->
						<asControls:DialogItem>
							<TextBlock Classes="Dialog_TextBlock_Label" Text="{DynamicResource String/RegexEditorDialog.TestResult}"/>
							<Panel IsVisible="{Binding #window.HasTestResult}" VerticalAlignment="Center">
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding #window.TestResult}" Text="{DynamicResource String/RegexEditorDialog.TestResult.Success}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding !#window.TestResult}" Text="{DynamicResource String/RegexEditorDialog.TestResult.Failed}"/>
							</Panel>
							<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Right" IsVisible="{Binding !#window.HasTestResult}" Text="{DynamicResource String/Common.None}"/>
						</asControls:DialogItem>

						<!-- Captured groups -->
						<StackPanel IsVisible="{Binding #window.IsCapturingGroupsEnabled}">
							<Separator Classes="Dialog_Item_Separator"/>
							<asControls:DialogItem>
								<TextBlock Classes="Dialog_TextBlock_Label" IsVisible="{Binding !#window.IsCapturingLogPropertiesEnabled}" Text="{DynamicResource String/RegexEditorDialog.TestResult.CapturedGroups}"/>
								<TextBlock Classes="Dialog_TextBlock_Label" IsVisible="{Binding #window.IsCapturingLogPropertiesEnabled}" Text="{DynamicResource String/RegexEditorDialog.TestResult.CapturedLogProperties}"/>
								<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Right" IsVisible="{Binding !#window.CapturedGroups.Count}" Text="{DynamicResource String/Common.None}"/>
							</asControls:DialogItem>
							<Line Classes="Dialog_Item_Separator_Inner" IsVisible="{Binding #window.CapturedGroups.Count}"/>
							<ListBox Classes="Dialog_Item_ListBox" Grid.IsSharedSizeScope="True" IsVisible="{Binding #window.CapturedGroups.Count}" ItemsSource="{Binding #window.CapturedGroups}">
								<ListBox.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel/>
									</ItemsPanelTemplate>
								</ListBox.ItemsPanel>
								<ListBox.ItemTemplate>
									<DataTemplate>
										<Grid>
											<Grid.ColumnDefinitions>
												<ColumnDefinition SharedSizeGroup="name" Width="Auto"/>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
											</Grid.ColumnDefinitions>
											<TextBlock HorizontalAlignment="Right" Text="{Binding Item1, StringFormat={}{0}:}" VerticalAlignment="Center"/>
											<Separator Classes="Dialog_Separator_Small" Grid.Column="1"/>
											<TextBlock Grid.Column="2" Text="{Binding Item2}" VerticalAlignment="Center"/>
										</Grid>
									</DataTemplate>
								</ListBox.ItemTemplate>
							</ListBox>
						</StackPanel>

					</StackPanel>
				</Border>
			</StackPanel>
		</ScrollViewer>
		
	</DockPanel>
	
</Window>
