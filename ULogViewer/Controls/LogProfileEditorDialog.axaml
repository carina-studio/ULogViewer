<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:sys="using:System"
        xmlns:ia="using:Avalonia.Xaml.Interactivity"
        xmlns:iaCore="using:Avalonia.Xaml.Interactions.Core"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
        xmlns:app="clr-namespace:CarinaStudio.ULogViewer;assembly=ULogViewer"
        xmlns:appControls="clr-namespace:CarinaStudio.ULogViewer.Controls;assembly=ULogViewer"
        xmlns:appConverters="clr-namespace:CarinaStudio.ULogViewer.Converters;assembly=ULogViewer"
        xmlns:appDataSources="clr-namespace:CarinaStudio.ULogViewer.Logs.DataSources;assembly=ULogViewer"
        xmlns:appLogProfiles="clr-namespace:CarinaStudio.ULogViewer.Logs.Profiles;assembly=ULogViewer"
        xmlns:appLogs="clr-namespace:CarinaStudio.ULogViewer.Logs;assembly=ULogViewer"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.ULogViewer.Controls.LogProfileEditorDialog"
        Classes="Dialog"
        Width="{DynamicResource Double/LogProfileEditorDialog.Width}">

	<!-- Resources -->
	<Window.Resources>
		<ContextMenu x:Key="insertLogWritingFormatSyntaxMenu" PlacementMode="Bottom">
			<ContextMenu.DataTemplates>
				<DataTemplate DataType="{x:Type sys:String}">
					<StackPanel Orientation="Horizontal">
						<TextBlock Text="{Binding Converter={x:Static appConverters:LogPropertyNameConverter.Default}}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
						<TextBlock Grid.Column="1" Opacity="0.3" TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
							<TextBlock.Text>
								<MultiBinding StringFormat="{} ({0})">
									<Binding/>
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>
					</StackPanel>
				</DataTemplate>
			</ContextMenu.DataTemplates>
		</ContextMenu>
	</Window.Resources>

	<!-- Styles -->
	<Window.Styles>
		<Style Selector="ListBox">
			<Setter Property="Height" Value="{DynamicResource Double/LogProfileEditorDialog.ListBox.Height}"/>
		</Style>
		<Style Selector="ListBoxItem">
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="Padding" Value="{DynamicResource Thickness/Dialog.ListBox.Item.WithInPlaceActions.Padding}"/>
		</Style>
	</Window.Styles>

	<!-- Content -->
	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" DockPanel.Dock="Bottom">
			<StackPanel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{Binding $parent[Window].GenerateResultCommand}" Content="{DynamicResource String/Common.OK}"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding $parent[Window].Close}" Content="{DynamicResource String/Common.Cancel}"/>
			</StackPanel>
		</Border>

		<!-- Content -->
		<ScrollViewer Name="baseScrollViewer" Classes="Dialog_ContentPanel" HorizontalScrollBarVisibility="Disabled" MaxHeight="{DynamicResource Double/LogProfileEditorDialog.Content.MaxHeight}">
			<StackPanel Classes="Dialog_ContentPanel">

				<!-- Header -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/LogProfileEditorDialog.Common}"/>
				</Border>

				<!-- How to read and parse logs -->
				<asControls:LinkTextBlock HorizontalAlignment="Left" Text="{DynamicResource String/LogProfileEditorDialog.LearnAboutLogsReadingAndParsing}" Uri="{x:Static appControls:LogProfileEditorDialog.LogsReadingAndParsingPageUri}"/>
				<Separator Classes="Dialog_Separator"/>
				
				<!-- Name -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.Name}"/>
				<TextBox Name="nameTextBox" Classes="Dialog_TextBox" MaxLength="256" PropertyChanged="OnEditorControlPropertyChanged"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Description -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.Description}"/>
				<TextBox Name="descriptionTextBox" Classes="Dialog_TextBox" MaxLength="1024"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Icon -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.Icon}"/>
				<ComboBox Name="iconComboBox" Classes="Dialog_ComboBox" Items="{Binding $parent[Window].LogProfileIcons}">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<StackPanel Orientation="Horizontal">
								<Image Classes="Icon" Height="{DynamicResource Double/LogProfileEditorDialog.IconComboBox.Icon.Size}" Margin="{DynamicResource Thickness/LogProfileEditorDialog.IconComboBox.Icon.Margin}" Source="{Binding Converter={x:Static appConverters:LogProfileIconConverter.Default}}" Width="{DynamicResource Double/LogProfileEditorDialog.IconComboBox.Icon.Size}">
									<ia:Interaction.Behaviors>
										<iaCore:DataTriggerBehavior Binding="{Binding $parent[ComboBoxItem].IsSelected}" Value="True">
											<iaCore:ChangePropertyAction PropertyName="Source" Value="{Binding Converter={x:Static appConverters:LogProfileIconConverter.Default}, ConverterParameter=Light}"/>
										</iaCore:DataTriggerBehavior>
										<iaCore:DataTriggerBehavior Binding="{Binding $parent[ComboBoxItem].IsSelected}" Value="False">
											<iaCore:ChangePropertyAction PropertyName="Source" Value="{Binding Converter={x:Static appConverters:LogProfileIconConverter.Default}}"/>
										</iaCore:DataTriggerBehavior>
									</ia:Interaction.Behaviors>
								</Image>
								<TextBlock Text="{Binding Converter={x:Static appControls:LogProfileEditorDialog.LogProfileIconNameConverter}}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
							</StackPanel>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Header -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/LogProfileEditorDialog.LogReading}"/>
				</Border>

				<!-- DataSource -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.DataSourceProvider}"/>
				<Grid ColumnDefinitions="*,Auto">
					<ComboBox Name="dataSourceProviderComboBox" HorizontalAlignment="Stretch" Items="{x:Static appDataSources:LogDataSourceProviders.All}" SelectionChanged="OnDataSourceProviderComboBoxSelectionChanged">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding DisplayName}" TextTrimming="CharacterEllipsis"/>
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<Button Classes="BrowseButton" Command="{Binding $parent[Window].SetDataSourceOptions}" Content="{DynamicResource String/LogProfileEditorDialog.DataSourceOptions}" Grid.Column="1" IsEnabled="{Binding #dataSourceProviderComboBox.SelectedItem.SupportedSourceOptions.Count}"/>
				</Grid>
				<TextBlock Classes="Dialog_TextBlock_Description_Error" IsVisible="{Binding !$parent[Window].IsValidDataSourceOptions}" Text="{DynamicResource String/LogProfileEditorDialog.InvalidDataSourceOptions}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Allow multiple files -->
				<StackPanel Name="allowMultipleFilesPanel" HorizontalAlignment="Stretch" Orientation="Vertical">
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.AllowMultipleFiles}"/>
					<ToggleSwitch Name="allowMultipleFilesSwitch" Classes="Dialog_ToggleSwitch"/>
					<Separator Classes="Dialog_Separator"/>
				</StackPanel>

				<!-- Is working directory needed -->
				<StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">
					<ia:Interaction.Behaviors>
						<iaCore:DataTriggerBehavior Binding="{Binding $parent[Window].UnderlyingDataSource}" ComparisonCondition="Equal" Value="StandardOutput">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="True"/>
						</iaCore:DataTriggerBehavior>
						<iaCore:DataTriggerBehavior Binding="{Binding $parent[Window].UnderlyingDataSource}" ComparisonCondition="NotEqual" Value="StandardOutput">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="False"/>
						</iaCore:DataTriggerBehavior>
					</ia:Interaction.Behaviors>
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.IsWorkingDirectoryNeeded}"/>
					<ToggleSwitch Name="workingDirNeededSwitch" Classes="Dialog_ToggleSwitch"/>
					<Separator Classes="Dialog_Separator"/>
				</StackPanel>

				<!-- Is continuous reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.IsContinuousReading}"/>
				<ToggleSwitch Name="continuousReadingSwitch" Classes="Dialog_ToggleSwitch">
					<ia:Interaction.Behaviors>
						<iaCore:DataTriggerBehavior Binding="{Binding #dataSourceProviderComboBox.SelectedItem.UnderlyingSource}" ComparisonCondition="Equal" Value="File">
							<iaCore:ChangePropertyAction PropertyName="IsChecked" Value="False"/>
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="False"/>
						</iaCore:DataTriggerBehavior>
						<iaCore:DataTriggerBehavior Binding="{Binding #dataSourceProviderComboBox.SelectedItem.UnderlyingSource}" ComparisonCondition="NotEqual" Value="File">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="True"/>
						</iaCore:DataTriggerBehavior>
					</ia:Interaction.Behaviors>
				</ToggleSwitch>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.IsContinuousReading.Description}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Is administrator needed -->
				<StackPanel Name="isAdminNeededPanel" HorizontalAlignment="Stretch" Orientation="Vertical">
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.IsAdministratorNeeded}"/>
					<ToggleSwitch Name="adminNeededSwitch" Classes="Dialog_ToggleSwitch"/>
					<Separator Classes="Dialog_Separator"/>
				</StackPanel>

				<!-- Log level map -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogLevelMapForReading}"/>
				<ListBox Name="logLevelMapForReadingListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].LogLevelMapEntriesForReading}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
					<ListBox.ItemTemplate>
						<DataTemplate>
							<Grid ColumnDefinitions="*,*">
								<TextBlock Text="{Binding Key}" TextTrimming="CharacterEllipsis"/>
								<Border Classes="InPlaceAction_Reserved"/>
								<DockPanel Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
									<StackPanel DockPanel.Dock="Right" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveLogLevelMapEntry}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
										</Button>
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditLogLevelMapEntryForReading}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
										</Button>
									</StackPanel>
									<StackPanel Orientation="Horizontal">
										<Border Background="{Binding Value, Converter={x:Static appConverters:LogLevelBrushConverter.Default}}" BorderBrush="{DynamicResource ComboBoxItemForeground}" BorderThickness="1" Height="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}" Margin="{DynamicResource Thickness/LogLevelComboBox.Item.Indicator.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}"/>
										<TextBlock Text="{Binding Value, Converter={x:Static appControls:SessionView.LogLevelNameConverter}}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
									</StackPanel>
								</DockPanel>
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
				<Grid ColumnDefinitions="*,Auto">
					<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.LogLevelMapForReading.Description}" VerticalAlignment="Top"/>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddLogLevelMapEntryForReading}" Content="{DynamicResource String/Common.Add}" Grid.Column="1" VerticalAlignment="Top"/>
				</Grid>
				<Separator Classes="Dialog_Separator"/>

				<!-- Log patterns -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogPatterns}"/>
				<ListBox Name="logPatternListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].LogPatterns}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
					<ListBox.ItemTemplate>
						<DataTemplate DataType="{x:Type appLogs:LogPattern}">
							<Grid ColumnDefinitions="*,Auto">
								<TextBlock Text="{Binding Regex}" TextTrimming="CharacterEllipsis"/>
								<Border Classes="InPlaceAction_Reserved"/>
								<StackPanel Grid.Column="1" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveLogPattern}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditLogPattern}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].MoveLogPatternUp}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.MoveUp}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.MoveUp}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].MoveLogPatternDown}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.MoveDown}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.MoveDown}"/>
									</Button>
								</StackPanel>
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
				<Grid ColumnDefinitions="*,Auto">
					<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.LogPatterns.Description}" VerticalAlignment="Top"/>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddLogPattern}" Content="{DynamicResource String/Common.Add}" Grid.Column="1" VerticalAlignment="Top"/>
				</Grid>
				<Separator Classes="Dialog_Separator"/>

				<!-- Log string encoding for reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogStringEncodingForReading}"/>
				<asControls:EnumComboBox Name="logStringEncodingForReadingComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogs:LogStringEncoding}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Timestamp encoding for reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimestampEncodingForReading}"/>
				<asControls:EnumComboBox Name="timestampEncodingForReadingComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogs:LogTimestampEncoding}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Timestamp format for reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimestampFormatsForReading}"/>
				<StackPanel>
					<ia:Interaction.Behaviors>
						<iaCore:DataTriggerBehavior Binding="{Binding #timestampEncodingForReadingComboBox.SelectedItem}" Value="Custom">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="True"/>
						</iaCore:DataTriggerBehavior>
						<iaCore:DataTriggerBehavior Binding="{Binding #timestampEncodingForReadingComboBox.SelectedItem}" ComparisonCondition="NotEqual" Value="Custom">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="False"/>
						</iaCore:DataTriggerBehavior>
					</ia:Interaction.Behaviors>
					<ListBox Name="timestampFormatsForReadingListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].TimestampFormatsForReading}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
						<ListBox.ItemTemplate>
							<DataTemplate>
								<Grid ColumnDefinitions="*,Auto">
									<TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis"/>
									<Border Classes="InPlaceAction_Reserved"/>
									<StackPanel Grid.Column="1" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveTimestampFormatForReading}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
										</Button>
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditTimestampFormatForReading}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
										</Button>
									</StackPanel>
								</Grid>
							</DataTemplate>
						</ListBox.ItemTemplate>
					</ListBox>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddTimestampFormatForReading}" Content="{DynamicResource String/Common.Add}"/>
				</StackPanel>
				<Separator Classes="Dialog_Separator"/>

				<!-- Time span encoding for reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimeSpanEncodingForReading}"/>
				<asControls:EnumComboBox Name="timeSpanEncodingForReadingComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogs:LogTimeSpanEncoding}"/>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.TimeSpanEncodingForReading.Description}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Time span format for reading -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimeSpanFormatsForReading}"/>
				<StackPanel>
					<ia:Interaction.Behaviors>
						<iaCore:DataTriggerBehavior Binding="{Binding #timeSpanEncodingForReadingComboBox.SelectedItem}" Value="Custom">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="True"/>
						</iaCore:DataTriggerBehavior>
						<iaCore:DataTriggerBehavior Binding="{Binding #timeSpanEncodingForReadingComboBox.SelectedItem}" ComparisonCondition="NotEqual" Value="Custom">
							<iaCore:ChangePropertyAction PropertyName="IsEnabled" Value="False"/>
						</iaCore:DataTriggerBehavior>
					</ia:Interaction.Behaviors>
					<ListBox Name="timeSpanFormatsForReadingListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].TimeSpanFormatsForReading}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
						<ListBox.ItemTemplate>
							<DataTemplate>
								<Grid ColumnDefinitions="*,Auto">
									<TextBlock Text="{Binding}" TextTrimming="CharacterEllipsis"/>
									<Border Classes="InPlaceAction_Reserved"/>
									<StackPanel Grid.Column="1" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveTimeSpanFormatForReading}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
										</Button>
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditTimeSpanFormatForReading}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
										</Button>
									</StackPanel>
								</Grid>
							</DataTemplate>
						</ListBox.ItemTemplate>
					</ListBox>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddTimeSpanFormatForReading}" Content="{DynamicResource String/Common.Add}"/>
				</StackPanel>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Header -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/LogProfileEditorDialog.LogDisplaying}"/>
				</Border>
				
				<!-- Visible log properties -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.VisibleLogProperties}"/>
				<ListBox Name="visibleLogPropertyListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].VisibleLogProperties}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
					<ListBox.ItemTemplate>
						<DataTemplate DataType="{x:Type appLogProfiles:LogProperty}">
							<Grid ColumnDefinitions="Auto,*,Auto">
								<TextBlock Text="{Binding DisplayName, Converter={x:Static appConverters:LogPropertyNameConverter.Default}}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
								<Border Classes="InPlaceAction_Reserved"/>
								<TextBlock Grid.Column="1" Opacity="0.3" TextTrimming="CharacterEllipsis" VerticalAlignment="Center">
									<TextBlock.Text>
										<MultiBinding StringFormat="{} ({0})">
											<Binding Path="Name"/>
										</MultiBinding>
									</TextBlock.Text>
								</TextBlock>
								<StackPanel Grid.Column="2" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveVisibleLogProperty}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditVisibleLogProperty}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].MoveVisibleLogPropertyUp}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.MoveUp}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.MoveUp}"/>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].MoveVisibleLogPropertyDown}" CommandParameter="{Binding $parent[ListBoxItem]}" ToolTip.Tip="{DynamicResource String/Common.MoveDown}">
										<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.MoveDown}"/>
									</Button>
								</StackPanel>
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
				<Grid ColumnDefinitions="*,Auto">
					<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.VisibleLogProperties.Description}" VerticalAlignment="Top"/>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddVisibleLogProperty}" Content="{DynamicResource String/Common.Add}" Grid.Column="1" VerticalAlignment="Top"/>
				</Grid>
				<Separator Classes="Dialog_Separator"/>

				<!-- Timestamp format for displaying -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimestampFormatForDisplaying}"/>
				<TextBox Name="timestampFormatForDisplayingTextBox" Classes="Dialog_TextBox" MaxLength="256"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.FormatDescription}" Uri="{x:Static app:Uris.DateTimeFormatReference}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Time span format for displaying -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimeSpanFormatForDisplaying}"/>
				<TextBox Name="timeSpanFormatForDisplayingTextBox" Classes="Dialog_TextBox" MaxLength="256"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.FormatDescription}" Uri="{x:Static app:Uris.TimeSpanFormatReference}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Color indicator -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.ColorIndicator}"/>
				<asControls:EnumComboBox Name="colorIndicatorComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogProfiles:LogColorIndicator}"/>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.ColorIndicator.Description}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Sort key -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.SortKey}"/>
				<asControls:EnumComboBox Name="sortKeyComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogProfiles:LogSortKey}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Sort direction -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.SortDirection}"/>
				<asControls:EnumComboBox Name="sortDirectionComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type app:SortDirection}"/>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Header -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/LogProfileEditorDialog.LogWriting}"/>
				</Border>
				
				<!-- Log writing format -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogWritingFormat}"/>
				<Grid ColumnDefinitions="*,Auto">
					<TextBox Name="logWritingFormatTextBox" Watermark="{DynamicResource String/LogProfileEditorDialog.LogWritingFormat.Watermark}"/>
					<ToggleButton Name="insertLogWritingFormatSyntaxButton" Classes="BrowseButton" Command="{Binding $parent[Window].ShowInsertLogWritingFormatSyntaxMenu}" Grid.Column="1"/>
				</Grid>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.LogWritingFormat.Description}"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.FormatDescription}" Uri="{x:Static app:Uris.StringInterpolationReference}"/>
				<Separator Classes="Dialog_Separator"/>
				
				<!-- Log level map -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogLevelMapForWriting}"/>
				<ListBox Name="logLevelMapForWritingListBox" DoubleTapped="OnListBoxDoubleTapped" Items="{Binding $parent[Window].LogLevelMapEntriesForWriting}" LostFocus="OnListBoxLostFocus" SelectionChanged="OnListBoxSelectionChanged">
					<ListBox.ItemTemplate>
						<DataTemplate>
							<Grid ColumnDefinitions="*,*">
								<StackPanel Orientation="Horizontal">
									<Border Background="{Binding Key, Converter={x:Static appConverters:LogLevelBrushConverter.Default}}" BorderBrush="{DynamicResource ComboBoxItemForeground}" BorderThickness="1" Height="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}" Margin="{DynamicResource Thickness/LogLevelComboBox.Item.Indicator.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/LogLevelComboBox.Item.Indicator.Size}"/>
									<TextBlock Text="{Binding Key, Converter={x:Static appControls:SessionView.LogLevelNameConverter}}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center"/>
								</StackPanel>
								<Border Classes="InPlaceAction_Reserved"/>
								<DockPanel Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
									<StackPanel DockPanel.Dock="Right" IsVisible="{Binding $parent[ListBoxItem].IsPointerOver}" Orientation="Horizontal">
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].RemoveLogLevelMapEntry}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Delete}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Delete}"/>
										</Button>
										<Button Classes="InPlaceAction_Button" Command="{Binding $parent[Window].EditLogLevelMapEntryForWriting}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Edit}">
											<Image Classes="InPlaceAction_Icon" Source="{DynamicResource Image/Icon.Edit}"/>
										</Button>
									</StackPanel>
									<TextBlock Text="{Binding Value}" TextTrimming="CharacterEllipsis"/>
								</DockPanel>
							</Grid>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
				<Grid ColumnDefinitions="*,Auto">
					<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.LogLevelMapForWriting.Description}" VerticalAlignment="Top"/>
					<Button Classes="ListAction" Command="{Binding $parent[Window].AddLogLevelMapEntryForWriting}" Content="{DynamicResource String/Common.Add}" Grid.Column="1" VerticalAlignment="Top"/>
				</Grid>
				<Separator Classes="Dialog_Separator"/>

				<!-- Log string format for writing -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.LogStringEncodingForWriting}"/>
				<asControls:EnumComboBox Name="logStringEncodingForWritingComboBox" Classes="Dialog_ComboBox" EnumType="{x:Type appLogs:LogStringEncoding}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Timestamp format for writing -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimestampFormatForWriting}"/>
				<TextBox Name="timestampFormatForWritingTextBox" Classes="Dialog_TextBox" MaxLength="256" Watermark="{DynamicResource String/LogProfileEditorDialog.TimestampFormatForWriting.Watermark}"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.FormatDescription}" Uri="{x:Static app:Uris.DateTimeFormatReference}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Time span format for writing -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/LogProfileEditorDialog.TimeSpanFormatForWriting}"/>
				<TextBox Name="timeSpanFormatForWritingTextBox" Classes="Dialog_TextBox" MaxLength="256" Watermark="{DynamicResource String/LogProfileEditorDialog.TimeSpanFormatForWriting.Watermark}"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/LogProfileEditorDialog.FormatDescription}" Uri="{x:Static app:Uris.TimeSpanFormatReference}"/>

			</StackPanel>
		</ScrollViewer>
		
	</DockPanel>
  
</Window>
