<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:abControls="using:CarinaStudio.Controls"
        xmlns:abConverters="using:CarinaStudio.Data.Converters"
        xmlns:appControls="using:CarinaStudio.ULogViewer.Controls"
        xmlns:appConverters="using:CarinaStudio.ULogViewer.Converters"
        xmlns:appProfiles="using:CarinaStudio.ULogViewer.Logs.Profiles"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
        xmlns:asXaml="using:CarinaStudio.AppSuite.Xaml"
        xmlns:i="using:Avalonia.Xaml.Interactivity"
        xmlns:iCore="using:Avalonia.Xaml.Interactions.Core"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="CarinaStudio.ULogViewer.Controls.LogProfileSelectionDialog"
        Classes="Dialog"
		Name="window"
        Height="{StaticResource Double/LogProfileSelectionDialog.Height}"
        MinHeight="{StaticResource Double/LogProfileSelectionDialog.MinHeight}"
        MinWidth="{StaticResource Double/LogProfileSelectionDialog.Width}"
        SizeToContent="Manual"
        Title="{DynamicResource String/LogProfileSelectionDialog.Title}"
        Width="{StaticResource Double/LogProfileSelectionDialog.Width}">

	<!-- Styles -->
	<Window.Styles>
		<Style Selector="ListBox.LogProfiles">
			<Setter Property="Background" Value="{x:Static Brushes.Transparent}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="ItemTemplate">
				<Setter.Value>
					<DataTemplate DataType="{x:Type appProfiles:LogProfile}">
						<Border Name="itemRoot" Background="{x:Static Brushes.Transparent}" DoubleTapped="OnLogProfileItemDoubleTapped" Padding="{DynamicResource Thickness/LogProfileSelectionDialog.LogProfile.Padding}">
							<Grid ColumnDefinitions="Auto,*,Auto" RowDefinitions="Auto,Auto,Auto">

								<Grid.Styles>
									<Style Selector="Panel.LogProfileInfo:disabled">
										<Setter Property="Opacity" Value="{StaticResource Double/Icon.Opacity.Disabled}"/>
									</Style>
									<Style Selector="TextBlock.LogProfileInfo:disabled">
										<Setter Property="Opacity" Value="{StaticResource Double/Icon.Opacity.Disabled}"/>
									</Style>
									<Style Selector="WrapPanel.LogProfileInfo:disabled">
										<Setter Property="Opacity" Value="{StaticResource Double/Icon.Opacity.Disabled}"/>
									</Style>
								</Grid.Styles>

								<!-- Icon -->
								<Panel Grid.RowSpan="3" 
								       Height="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Icon.Size}" 
								       IsEnabled="{asXaml:OrBindings {Binding #window.IsProVersionActivated}, {Binding !IsProVersionOnly}}"
								       Margin="{DynamicResource Thickness/LogProfileSelectionDialog.LogProfile.Icon.Margin}" 
								       VerticalAlignment="Top" 
								       Width="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Icon.Size}">
									<Image Classes="Icon" 
									       IsVisible="{Binding !$parent[ListBoxItem].IsSelected}"
									       Source="{asXaml:MultiBinding {Binding Icon}, {Binding IconColor}, Converter={x:Static appConverters:LogProfileIconConverter.Default}}"/>
									<Image Classes="Icon" 
									       IsVisible="{Binding $parent[ListBoxItem].IsSelected}">
										<Image.Source>
											<MultiBinding Converter="{x:Static appConverters:LogProfileIconConverter.Default}" ConverterParameter="Light">
												<Binding Path="Icon"/>
												<Binding Path="IconColor"/>
											</MultiBinding>
										</Image.Source>
									</Image>
								</Panel>
								
								<!-- Name -->
								<Grid ColumnDefinitions="*,Auto" Grid.Column="1" HorizontalAlignment="Left">
									<TextBlock Classes="LogProfileInfo" 
									           FontSize="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Name.FontSize}" 
									           IsEnabled="{asXaml:OrBindings {Binding #window.IsProVersionActivated}, {Binding !IsProVersionOnly}}"
									           Margin="{DynamicResource Thickness/LogProfileSelectionDialog.LogProfile.Name.Margin}" 
									           Text="{Binding Name}" 
									           TextWrapping="NoWrap" 
									           TextTrimming="CharacterEllipsis" 
									           VerticalAlignment="Center"/>
									<Panel Background="{x:Static Brushes.Transparent}" 
									       Height="{StaticResource Double/LogProfileSelectionDialog.LogProfile.ProVersionIcon.Size}" 
									       IsVisible="{asXaml:AndBindings {Binding !#window.IsProVersionActivated}, {Binding IsProVersionOnly}}"
									       Grid.Column="1" 
									       Margin="{StaticResource Thickness/LogProfileSelectionDialog.LogProfile.ProVersionIcon.Margin}" 
									       ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.ProVersionOnly}"
									       VerticalAlignment="Center" Width="{StaticResource Double/LogProfileSelectionDialog.LogProfile.ProVersionIcon.Size}">
										<Image Classes="Icon" IsVisible="{Binding !$parent[ListBoxItem].IsSelected}" Source="{StaticResource Image/Icon.Professional.Colored}"/>
										<Image Classes="Icon" IsVisible="{Binding $parent[ListBoxItem].IsSelected}" Source="{StaticResource Image/Icon.Professional}"/>
									</Panel>
								</Grid>

								<!-- Description -->
								<Panel Classes="LogProfileInfo" 
								       IsEnabled="{asXaml:OrBindings {Binding #window.IsProVersionActivated}, {Binding !IsProVersionOnly}}"
								       Grid.Column="1" 
								       Grid.ColumnSpan="2" 
								       Grid.Row="1" 
								       Margin="{DynamicResource Thickness/LogProfileSelectionDialog.LogProfile.Description.Margin}">
									<abControls:TextBlock FontSize="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Description.FontSize}" IsVisible="{Binding HasDescription}" MaxLines="5" Opacity="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Description.Opacity}" Text="{Binding Description}" TextTrimming="CharacterEllipsis" TextWrapping="WrapWithOverflow"/>
									<TextBlock FontSize="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Description.FontSize}" IsVisible="{Binding !HasDescription}" Opacity="{DynamicResource Double/LogProfileSelectionDialog.LogProfile.Description.Opacity}" Text="{DynamicResource String/LogProfileSelectionDialog.NoDescription}" TextTrimming="CharacterEllipsis"/>
								</Panel>

								<!-- Labels -->
								<WrapPanel Classes="LogProfileInfo" 
								           IsEnabled="{asXaml:OrBindings {Binding #window.IsProVersionActivated}, {Binding !IsProVersionOnly}}"
								           Grid.Column="1" 
								           Grid.ColumnSpan="2" Grid.Row="2" 
								           Orientation="Horizontal">
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label" IsVisible="{Binding !#proDataSourceProviderLabel.IsVisible}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{Binding DataSourceProvider.DisplayName}"/>
									</Border>
									<Border Name="proDataSourceProviderLabel" Classes="LogProfileSelectionDialog_LogProfile_Label_Pro" IsVisible="{Binding DataSourceProvider, Converter={x:Static appControls:LogProfileSelectionDialog.ProDataSourceProviderConverter}}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{Binding DataSourceProvider.DisplayName}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label_Pro" IsVisible="{Binding LogChartType, Converter={x:Static abConverters:ObjectConverters.IsNotEquivalentTo}, ConverterParameter={x:Static appProfiles:LogChartType.None}}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.HasLogChart}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label_Pro" IsVisible="{Binding CooperativeLogAnalysisScriptSet, Converter={x:Static ObjectConverters.IsNotNull}}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.HasCooperativeLogAnalysisScriptSet}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label" IsVisible="{Binding IsBuiltIn}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.BuiltInLogProfile}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label" IsVisible="{Binding IsContinuousReading}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.IsContinuousReading}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label" IsVisible="{Binding WorkingDirectoryRequirement, Converter={x:Static abConverters:ObjectConverters.IsEquivalentTo}, ConverterParameter={x:Static appProfiles:LogProfilePropertyRequirement.Required}}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.IsWorkingDirectoryNeeded}"/>
									</Border>
									<Border Classes="LogProfileSelectionDialog_LogProfile_Label" IsVisible="{Binding IsAdministratorNeeded}">
										<TextBlock Classes="LogProfileSelectionDialog_LogProfile_Label" Text="{DynamicResource String/LogProfileSelectionDialog.IsAdministratorNeeded}"/>
									</Border>
								</WrapPanel>

								<!-- Actions -->
								<StackPanel Grid.Column="2" 
								            Grid.RowSpan="3" 
								            Orientation="Horizontal" 
								            VerticalAlignment="Top">
									<StackPanel.IsVisible>
										<MultiBinding Converter="{x:Static BoolConverters.And}">
											<Binding Path="IsPointerOver" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}"/>
											<MultiBinding Converter="{x:Static BoolConverters.Or}">
												<Binding Path="IsProVersionActivated" ElementName="window"/>
												<Binding Path="!IsProVersionOnly"/>
											</MultiBinding>
										</MultiBinding>
									</StackPanel.IsVisible>
									<Button Classes="InPlaceAction_Button" Command="{Binding #window.RemoveLogProfileCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" IsVisible="{Binding !IsBuiltIn}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.RemoveLogProfile}">
										<asControls:Image Classes="InPlaceAction_Icon">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Delete.Outline}"/>
											</DrawingImage>
										</asControls:Image>
									</Button>
									<Button Classes="InPlaceAction_Button" Command="{Binding #window.ExportLogProfileCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.ExportLogProfile}">
										<asControls:Image Classes="InPlaceAction_Icon">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Export}"/>
											</DrawingImage>
										</asControls:Image>
									</Button>
									<StackPanel IsVisible="{Binding #window.Filter, Converter={x:Static ObjectConverters.IsNull}}" Orientation="Horizontal">
										<Button Classes="InPlaceAction_Button" Command="{Binding #window.CopyLogProfileCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" ToolTip.Tip="{DynamicResource String/Common.Copy}">
											<asControls:Image Classes="InPlaceAction_Icon">
												<DrawingImage>
													<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Copy.Outline}"/>
												</DrawingImage>
											</asControls:Image>
										</Button>
										<Button Classes="InPlaceAction_Button" Command="{Binding #window.EditLogProfileCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" IsVisible="{Binding !IsBuiltIn}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.EditLogProfile}">
											<asControls:Image Classes="InPlaceAction_Icon">
												<DrawingImage>
													<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Edit.Outline}"/>
												</DrawingImage>
											</asControls:Image>
										</Button>
									</StackPanel>
									<Button Classes="InPlaceAction_Button" Command="{Binding #window.PinUnpinLogProfileCommand}" CommandParameter="{Binding $parent[ListBoxItem].DataContext}" IsVisible="{Binding !IsTemplate}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.PinUnpinLogProfile}">
										<asControls:Image Classes="InPlaceAction_Icon">
											<DrawingImage>
												<GeometryDrawing Brush="{Binding #itemRoot.(TextElement.Foreground)}" Geometry="{StaticResource Geometry/Icon.Pin.Outline}"/>
											</DrawingImage>
										</asControls:Image>
									</Button>
								</StackPanel>

							</Grid>
						</Border>
					</DataTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Padding" Value="0"/>
			<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
		</Style>
		<Style Selector="ListBoxItem">
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="Margin" Value="{DynamicResource Thickness/LogProfileSelectionDialog.LogProfile.Margin}"/>
			<Setter Property="Padding" Value="0"/>
		</Style>
	</Window.Styles>
	
	<!-- Content -->
	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" BoxShadow="{StaticResource BoxShadows/None}" DockPanel.Dock="Bottom">
			<StackPanel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.AddLogProfile}" Content="{DynamicResource String/LogProfileSelectionDialog.AddLogProfile}" IsVisible="{Binding #window.Filter, Converter={x:Static ObjectConverters.IsNull}}"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.ImportLogProfile}" Content="{DynamicResource String/LogProfileSelectionDialog.ImportLogProfile}" IsVisible="{Binding #window.Filter, Converter={x:Static ObjectConverters.IsNull}}"/>
				<Separator Classes="Dialog_Separator_Small"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.GenerateResultCommand}" Content="{DynamicResource String/Common.OK}"/>
				<Button Classes="Dialog_ControlButton" Command="{Binding #window.Close}" Content="{DynamicResource String/Common.Cancel}"/>
			</StackPanel>
		</Border>
		
		<!-- Navigation bar -->
		<Border Name="navigationBar" 
		        Classes="ToolBar" 
		        BorderBrush="{DynamicResource Brush/ToolBar.Border}"
		        BorderThickness="0,0,1,0" DockPanel.Dock="Left">
		    <Border.IsVisible>
				<MultiBinding Converter="{x:Static BoolConverters.Or}">
					<Binding Path="IsVisible" ElementName="pinnedLogProfilesButton"/>
					<Binding Path="IsVisible" ElementName="recentlyUsedLogProfilesButton"/>
					<Binding Path="IsVisible" ElementName="otherLogProfilesButton"/>
					<Binding Path="IsVisible" ElementName="templateLogProfilesButton"/>
				</MultiBinding>
			</Border.IsVisible>
			<asControls:ToolBarScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
				<StackPanel>
					
					<!-- Pinned profiles -->
					<ToggleButton Name="pinnedLogProfilesButton" Classes="ToolBar_ToggleButton" IsVisible="{Binding #window.PinnedLogProfiles.Count}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.RecentlyUsedLogProfiles}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.Pin.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.Pin.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Recently used profiles -->
					<ToggleButton Name="recentlyUsedLogProfilesButton" Classes="ToolBar_ToggleButton" IsVisible="{Binding #window.RecentlyUsedLogProfiles.Count}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.RecentlyUsedLogProfiles}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.History}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Icon.History.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Other profiles -->
					<ToggleButton Name="otherLogProfilesButton" Classes="ToolBar_ToggleButton" IsVisible="{Binding #window.OtherLogProfiles.Count}" ToolTip.Tip="{Binding #window.OtherLogProfilesPanelTitle}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/LogProfile.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/LogProfile.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
					<!-- Template profiles -->
					<ToggleButton Name="templateLogProfilesButton" Classes="ToolBar_ToggleButton" IsVisible="{Binding #window.TemplateLogProfiles.Count}" ToolTip.Tip="{DynamicResource String/LogProfileSelectionDialog.TemplateLogProfiles}">
						<Panel>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding !$parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Template.Outline}"/>
							<Image Classes="ToolBar_Icon" IsVisible="{Binding $parent[ToggleButton].IsChecked}" Source="{StaticResource Image/Template.Outline.Light}"/>
						</Panel>
					</ToggleButton>
					
				</StackPanel>
			</asControls:ToolBarScrollViewer>
		</Border>

		<!-- Log profiles -->
		<Panel>
			<ScrollViewer Name="scrollViewer">
				<StackPanel Classes="Dialog_ContentPanel_WithItemsGroups">

					<!-- Pinned profiles -->
					<StackPanel Name="pinnedLogProfilesPanel" IsVisible="{Binding #window.PinnedLogProfiles.Count}">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/LogProfileSelectionDialog.PinnedLogProfiles}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<ListBox Name="pinnedLogProfileListBox" Classes="LogProfiles" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding #window.PinnedLogProfiles}" SelectionChanged="OnPinnedLogProfilesSelectionChanged"/>
						</Border>
					</StackPanel>
					
					<Separator Classes="Dialog_Separator_Large">
						<Separator.IsVisible>
							<MultiBinding Converter="{x:Static BoolConverters.And}">
								<Binding Path="IsVisible" ElementName="pinnedLogProfilesPanel"/>
								<Binding Path="IsVisible" ElementName="recentlyUsedLogProfilesPanel"/>
							</MultiBinding>
						</Separator.IsVisible>
					</Separator>

					<!-- Recently used profiles -->
					<StackPanel Name="recentlyUsedLogProfilesPanel" IsVisible="{Binding #window.RecentlyUsedLogProfiles.Count}">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/LogProfileSelectionDialog.RecentlyUsedLogProfiles}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<StackPanel>
								<ListBox Name="recentlyUsedLogProfileListBox" Classes="LogProfiles" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding #window.RecentlyUsedLogProfiles}" SelectionChanged="OnRecentlyUsedLogProfilesSelectionChanged"/>
								<Separator Classes="Dialog_Separator_Small"/>
								<Button Classes="Dialog_Item_Button" Command="{Binding ResetRecentlyUsedProfiles, Source={x:Static appProfiles:LogProfileManager.Default}}" Content="{DynamicResource String/LogProfileSelectionDialog.ResetRecentlyUsedLogProfiles}" HorizontalAlignment="Right"/>
							</StackPanel>
						</Border>
					</StackPanel>
					
					<Separator Classes="Dialog_Separator_Large">
						<Separator.IsVisible>
							<MultiBinding Converter="{x:Static BoolConverters.And}">
								<Binding Path="IsVisible" ElementName="recentlyUsedLogProfilesPanel"/>
								<Binding Path="IsVisible" ElementName="otherLogProfilesPanel"/>
							</MultiBinding>
						</Separator.IsVisible>
					</Separator>
					
					<!-- Other profiles -->
					<StackPanel Name="otherLogProfilesPanel" IsVisible="{Binding #window.OtherLogProfiles.Count}">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{Binding #window.OtherLogProfilesPanelTitle}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<ListBox Name="otherLogProfileListBox" Classes="LogProfiles" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding #window.OtherLogProfiles}" SelectionChanged="OnOtherLogProfilesSelectionChanged"/>
						</Border>
					</StackPanel>
					
					<Separator Classes="Dialog_Separator_Large">
						<Separator.IsVisible>
							<MultiBinding Converter="{x:Static BoolConverters.And}">
								<Binding Path="IsVisible" ElementName="otherLogProfilesPanel"/>
								<Binding Path="IsVisible" ElementName="templateLogProfilesPanel"/>
							</MultiBinding>
						</Separator.IsVisible>
					</Separator>

					<!-- Template profiles -->
					<StackPanel Name="templateLogProfilesPanel" IsVisible="{Binding #window.TemplateLogProfiles.Count}">
						<Border Classes="Dialog_ItemsGroup_Header">
							<TextBlock Classes="Dialog_ItemsGroup_Header" Text="{DynamicResource String/LogProfileSelectionDialog.TemplateLogProfiles}"/>
						</Border>
						<Border Classes="Dialog_ItemsGroup_Container">
							<ListBox Name="templateLogProfileListBox" Classes="LogProfiles" ItemsPanel="{StaticResource ItemsPanelTemplate/StackPanel}" ItemsSource="{Binding #window.TemplateLogProfiles}" SelectionChanged="OnTemplateLogProfilesSelectionChanged"/>
						</Border>
					</StackPanel>

				</StackPanel>
			</ScrollViewer>
			<Border BoxShadow="{DynamicResource BoxShadows/Shadow.Inner.Light}" Margin="0,-100,-100,0">
				<i:Interaction.Behaviors>
					<iCore:DataTriggerBehavior Binding="{Binding #navigationBar.IsVisible}" Value="True">
						<iCore:ChangePropertyAction PropertyName="Margin" Value="0,-100,-100,0"/>
					</iCore:DataTriggerBehavior>
					<iCore:DataTriggerBehavior Binding="{Binding #navigationBar.IsVisible}" Value="False">
						<iCore:ChangePropertyAction PropertyName="Margin" Value="-100,-100,-100,0"/>
					</iCore:DataTriggerBehavior>
				</i:Interaction.Behaviors>
			</Border>
		</Panel>
		
	</DockPanel>
	
</Window>
